<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" onmousemove="mouseTracker(evt)" cursor="url(hand.cur),default">
  <script type="text/ecmascript" xlink:href="2D.js"/>
  <title>SVG Meteors'n'Chains Game</title>
  <desc>
    experiment
  </desc>

  <defs>
    <g id="meteor"><circle cx="105" cy="115" r="20" fill="gray" opacity="0"/></g>
    <g id="chain"><line x1="0" y1="0" x2="200" y2="15" stroke="orange" stroke-width="5" opacity="0.5"/></g>
  </defs>

  <rect width="900" height="500" fill="beige" id="background"/>
  <text id="txt" x="10" y="30" font-size="26px" font-family="sans-serif" font-weight="bold">Status</text>
  <g id="meteors"/>
  <g id="chains"/>

  <rect x="200" y="20" width="100" height="30" fill="green" onclick="beginGame()"/>
  <rect x="400" y="20" width="100" height="30" fill="red" onclick="endGame()"/>  

<script type="text/ecmascript">
  var refreshRate = 50; // in ms
  var gameScreen = {width:window.innerWidth, height:window.innerHeight}
  var txt = document.getElementById("txt");
  var chains = new Array();
  var meteors = new Array();
  var lastMouseEvent = null;
  var chainsNode = document.getElementById("chains");
  var meteorsNode = document.getElementById("meteors");
  var chainPrototype = document.getElementById("chain").firstChild;
  var meteorPrototype = document.getElementById("meteor").firstChild;
  var detector = null;
  var meteorTimer = null;
  var chainTimer = null;

  function beginGame() {
    generateChain();
    detector = window.setInterval(check, 200);
    meteorTimer = window.setInterval(generateChain, 10000);
    chainTimer = window.setInterval(generateMeteor, 5000);
  }

  function endGame() {
    window.clearInterval(detector);
    window.clearInterval(meteorTimer);
    window.clearInterval(chainTimer);
    lastMouseEvent = null;
    while (chainsNode.hasChildNodes()) chainsNode.removeChild(chainsNode.firstChild);
    while (meteorsNode.hasChildNodes()) meteorsNode.removeChild(meteorsNode.firstChild);
  }

  function generateMeteor() {
    var met = meteorPrototype.cloneNode(true);
    met.setAttribute("cx", Math.round(Math.random()*gameScreen.width));
    met.setAttribute("cy", Math.round(Math.random()*gameScreen.height));
    meteorsNode.appendChild(met);
    meteors.push(met);
    simpleAnimate(met, "opacity", 1, 0.05);
    //simpleAnimate(met, "r", 1, -0.5);
  }

  function generateChain() {
    var whichSide = Math.round(Math.random()*4);
    switch (whichSide) {
      case 0: // top side
      case 1: // top side
        var x1 = Math.round(Math.random()*gameScreen.width);
        var y1 = 0;
        break;
      case 2: // left side
        var x1 = 0;
        var y1 = Math.round(Math.random()*gameScreen.height);
        break;
      case 3: // bottom side
        var x1 = Math.round(Math.random()*gameScreen.width);
        var y1 = gameScreen.height;
        break;
      case 4: // right side
        var x1 = gameScreen.width;
        var y1 = Math.round(Math.random()*gameScreen.height);
        break;
    }
    var ch = chainPrototype.cloneNode(true);
    ch.setAttribute("x1", x1);
    ch.setAttribute("y1", y1);
    ch.setAttribute("x2", (lastMouseEvent) ? lastMouseEvent.clientX : 0);
    ch.setAttribute("y2", (lastMouseEvent) ? lastMouseEvent.clientY : 0);
    chainsNode.appendChild(ch);
    chains.push(ch);
  }

  function check() {
    var crash = false;
    for (var m = 0; m &lt; meteors.length; m++) {
      for (var c = 0; c &lt; chains.length; c++) {
        var inter = Intersection.intersectShapes(new Line(chains[c]), new Circle(meteors[m]));
        if (inter.status != "Outside") crash = true;
        if (crash) break;
      }
      if (crash) break;
    }
    if (crash) {
      txt.firstChild.data = "Conflict!";
      txt.setAttribute("fill", "red");
    } else {
      txt.firstChild.data = "No conflict";
      txt.setAttribute("fill", "green");
    }
  }

  function mouseTracker(evt) {
    for (var c = 0; c &lt; chains.length; c++) {
      chains[c].setAttribute("x2", evt.clientX);
      chains[c].setAttribute("y2", evt.clientY);
    }
    lastMouseEvent = evt;
  }

  function simpleAnimate(obj, what, to, by) {
    var val = obj.getAttributeNS(null, what);
    val = (1*val) + by;
    obj.setAttributeNS(null, what, val);
    if (val == to) return; // stupid logic, should be more robust
    else setTimeout(function(){simpleAnimate(obj, what, to, by)}, refreshRate);
  }

</script>

</svg>