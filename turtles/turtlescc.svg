<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:html="http://www.w3.org/1999/xhtml" zoomAndPan="disable" font-family="sans-serif" onload="init2()">
    <title>SVG Turtles 1.02 Compatible mode</title>
    <desc>Simple SVG game created by Marek Raida, December 2003</desc>

    <script type="text/ecmascript"><![CDATA[

        // namespaces prefixes
        var svgns = "http://www.w3.org/2000/svg";
        var xlinkns = "http://www.w3.org/1999/xlink";

        // constant - from which level start lightning
        var whenStartLightning = 5;

        // constant - from which level start bad bonuses
        var whenStartNegativeBonuses = 2;

        // constant - from which level start 2nd croc
        var whenStart2ndCroc = 3;

        // status, whether next move is allowed or not
        var allowMove = false;

        // var representing the position of figure
        var position = 0;

        // var representing the previous position of figure
        var prevPos = 0;

        // var representing direction where jumping
        var jumpDir = "";   // 0 = left, 1 = right

        // commonly using retriction against restart etc.
        var restrict = false;

        // var representing the position of current crocodile
        var crocodile = 0;

        // var representing the position of 2nd crocodile
        var crocodile2nd = 0;

        // var representing the position cloud's position
        var cloudPos = 1;

        // var representing the cloud's direction
        var cloudDirection = "right";

        // var representing the position of lightning
        var lightning = -1;

        // var representing if lightning could be startet (minimal delay between)
        var allowLightning = true;

        // variable representing kill
        var kill = false;

        // x- of bonus (if available)
        var bonus = -1;

        // bonus time holder
        var bonusTime = null;

        // bonus positivity (1) / negativity (0)
        var bonusType = 1;

        // if in the air
        var inTheAir = false;

        // exists mainly for debugging purposes
        var resetOffset = -100;

        // number of remaining lives
        var lives = -1;

        // number of remaining lives
        var nextLifeRange = -1;

        // default speed of croc getting turtle
        var crocUpDown = 1000;

        // default speed figure's animation
        var panSpeed = 500;

        // default speed of cloud
        var cloudSpeed = 4000;

        // some despair time holders to solve timing
        var cloudHolder = null;
        // some despair time holders to solve timing
        var lightningHolder = null;

        // overall score
        var score = 0;

        // current level of playing
        var level = 1;

        // variable incrementing after each cross by and back, 
        // used to increment levels
        var crossing = 0;

        // constant of number of turtles
        var howManyTurtles = 6;

        // indicate where to go
        var goRight = true; var goLeft = false;

        // signalizes whether is current bank accessible or not
        var leftBankOpen = 0; var rightBankOpen = 0;

        // bank's time holders
        var bankTime = null;

        // internal flag to known whether open bank or no (randomly)
        var timeToOpenBank = false;

        // main messages status
        var fStatus = null;

        // main score status
        var fScore = null;

        // storing variable of games
        var HallOfFame = new Array();

/* ************************************************************************* */
/* *********************  FUNCTION SECTION START  ************************** */
/* ************************************************************************* */

        function init2() {
          // main messages status
          fStatus = document.getElementById("fStatus").firstChild;
  
          // main score status
          fScore = document.getElementById("score").firstChild;
  
          // run debugging, if needed
          setTimeout('debug()', 200);

          document.documentElement.addEventListener("keydown", press, false);
          document.documentElement.addEventListener("click", start, false);
        }

        // storno of hall of fame and help screens
        function detectEscEnt(evt, what) {
            if (evt && (evt.keyCode==27 || evt.keyCode==13)) {
                document.getElementById("hide"+what).beginElement();
            }
        }

        // emulation of input element
        function writeDown(evt) {

            var naming = document.getElementById('inputNameX').firstChild;

            // escape pressed, call the hall without name
            if (evt && evt.keyCode==27) {
                submitName('');
                return false;
            }

            // skip Shift, left, right, home, end, insert
            if (evt && ((evt.keyCode==16)||(evt.keyCode==37)||(evt.keyCode==39)||
                        (evt.keyCode==36)||(evt.keyCode==35)||(evt.keyCode==155))) {
                return false;
            }

            // enter, invoke submit of name
            if (evt && evt.keyCode==13) {
                var tmp = naming.data;
                naming.data = " ";  // reset
                submitName(tmp);
                return false;
            }

            if ((evt.keyCode==8) || (evt.keyCode==127)) {
                var prom = naming.data;
                prom = prom.substring(0, (prom.length-1))
                naming.data = prom;
            } else {
                var letter = String.fromCharCode(evt.keyCode);
                naming.data += letter;
            }

        }

        // internal callback function to sort arrays
        function sortByInt(item1, item2) {
            if(1*item1 < 1*item2)
                return 1;
            if(1*item1 < 1*item2)
                return 0;
            if(1*item1 > 1*item2)
                return -1;
        }

        function callback(urlRequestStatus) {
            var rows = new Array();

            if(urlRequestStatus.success) {
                rows = urlRequestStatus.content.split("\n");

                // do not allow offline php content showing
                if (urlRequestStatus.content.indexOf('$filename')!=-1) {
                    return false;
                }

                for (var i = 0; i < rows.length; i++) {
                    if (rows[i])
                        HallOfFame[i] = rows[i].split("#-|-#");
                }

                // get the table of fame
                var fame = document.getElementById('HallOfFame');

                // clear all subnodes in pool
                while (fame.childNodes.length>0) {
                    fame.removeChild(fame.firstChild);
                }

                // resort arrays to do what we want
                // create sorting index
                var tmpArray = new Array();
                for (var i = 0; i < HallOfFame.length; i++)
                    tmpArray[i] = HallOfFame[i][0];

                // sort index
                tmpArray.sort(sortByInt);

                // create new sorted array
                var ourResults = new Array();
                var topTen = (tmpArray.length>20) ? 20 : tmpArray.length;
                var total = 0;
                for (var y = 0; y < topTen; y++) {
                    for (var i = 0; i < HallOfFame.length; i++) {
                        if ((HallOfFame[i][0] == tmpArray[y]) && (total<topTen)) {
                            // create text span
                            var fameSpan = document.createElementNS(svgns, "tspan");
                            fameSpan.setAttributeNS(null, "x", "75");
                            fameSpan.setAttributeNS(null, "dx", "0");
                            fameSpan.setAttributeNS(null, "dy", "24");
                            fameSpan.appendChild(document.createTextNode(HallOfFame[i][0] +' .......... '+ HallOfFame[i][1]) );
                            fame.appendChild(fameSpan);
                            // reset
                            HallOfFame[i][0] = "unset";
                            total++;
                        }
                    }
                }

                // write others scores
                if (tmpArray.length>20) {
                    // get the second table of fame
                    var fame = document.getElementById('HallOfFameNext');

                    // clear all subnodes in pool
                    while (fame.childNodes.length>0) {
                        fame.removeChild(fame.firstChild);
                    }

                    var topTen = (tmpArray.length>(20+66)) ? (20+66) : tmpArray.length;
                    var total = 0;
                    for (var y = 20; y < topTen; y++) {
                        for (var i = 0; i < HallOfFame.length; i++) {
                            if ((HallOfFame[i][0] == tmpArray[y]) && (total<topTen)) {
                                // create text span
                                var fameSpan = document.createElementNS(svgns, "tspan");
                                fameSpan.setAttributeNS(null, "x", "470");
                                fameSpan.setAttributeNS(null, "dx", "0");
                                fameSpan.setAttributeNS(null, "dy", "7");
                                fameSpan.appendChild(document.createTextNode(HallOfFame[i][0] +' .......... '+ HallOfFame[i][1]) );
                                fame.appendChild(fameSpan);
                                // reset
                                HallOfFame[i][0] = "unset";
                                total++;
                            }
                        }
                    }
                }
            }
        }

        // submitting results to the hall of fame
        function submitName(hisName) {

            if (hisName && score) {
                if (hisName.length>50) {
                    hisName = hisName.substring(0,50);
                }
                var urlLink = "score.php?name="+URLEncode(hisName)+"&score="+score;
                // do save of new one and get list again
                getURL(urlLink, callback);
            } else {
                // simply get list
                getURL("score.php", callback);
            }

            document.getElementById('showHallOfFame').beginElement();

        }

        // encode string for URL 
    	// The Javascript escape and unescape functions do not correspond 
    	// with what browsers actually do...
        function URLEncode(plaintext) {

        	var SAFECHARS = "0123456789" +					// Numeric
        					"ABCDEFGHIJKLMNOPQRSTUVWXYZ" +	// Alphabetic
        					"abcdefghijklmnopqrstuvwxyz" +
        					"-_.!~*'()";					// RFC2396 Mark characters 
        	var HEX = "0123456789ABCDEF";

        	var encoded = "";
        	for (var i = 0; i < plaintext.length; i++ ) {
        		var ch = plaintext.charAt(i);
        	    if (ch == " ") {
        		    encoded += "+";				// x-www-urlencoded, rather than %20
        		} else if (SAFECHARS.indexOf(ch) != -1) {
        		    encoded += ch;
        		} else {
        		    var charCode = ch.charCodeAt(0);
        			if (charCode > 255) {
        			    alert( "Unicode Character '" + ch + "' cannot be encoded using standard URL encoding.\n" +
        				        "(URL encoding only supports 8-bit characters.)\n" +
        						"A space (+) will be substituted." );
        				encoded += "+";
        			} else {
        				encoded += "%";
        				encoded += HEX.charAt((charCode >> 4) & 0xF);
        				encoded += HEX.charAt(charCode & 0xF);
        			}
        		}
        	}
        	return encoded;
        }

        // reset reserved move flag
        function fAllowMove() {
            allowMove = true;
        }

        // reserve some time before next figure move by flag
        function reserveMove() {
            allowMove = false;
            setTimeout('fAllowMove()',panSpeed);
        }

        // kill third party restrictions applied to clicking/begining on active area (by flag)
        function removeRestriction() {
            restrict = false;
        }

        // testing only allowed actions and in range of two banks and one pool with some turtles ;-)
        function inRange(pressedKey) {
            if((pressedKey==37) && (position>(0-leftBankOpen+1)))
                return true;
            if((pressedKey==39) && (position<(howManyTurtles+rightBankOpen)))
                return true;
            return false;
        }

        // determining whether show some bonus or not and start it by time offset
        function fBonus() {
            if (!kill){
                var yesornot = Math.round(Math.random());

                if (yesornot) {
                    // generate new bonus type
                    bonusType = Math.round(Math.random());
                    if (level<whenStartNegativeBonuses)
                        bonusType = 1;

                    // switch between bonusesType
                    if (bonusType) {
                        document.getElementById('positiveBonus').setAttribute("opacity", 1);
                        document.getElementById('negativeBonus').setAttribute("opacity", 0);
                    } else {
                        document.getElementById('positiveBonus').setAttribute("opacity", 0);
                        document.getElementById('negativeBonus').setAttribute("opacity", 1);
                    }

                    var newBonus = Math.round(Math.random()*(howManyTurtles-1))+1;
                    if (newBonus==position) {
                        newBonus = (position==6) ? (newBonus-1) : (newBonus+1);
                    }

                    jBonus(newBonus, -75);
                    var bonusek = document.getElementById('showIt');
                    bonusek.beginElement();
                    document.getElementById('soundShow').play();

                    if (!kill){
                        // call with the same time as appearing animation lasts
                        setTimeout("doBonusActive("+newBonus+")", 1000);
                        bonusTime = setTimeout('destroyBonus("")', 3000);
                    }
                } else {
                    bonusTime = setTimeout('fBonus()', 4000);
                }
            }
        }


        // do bonus active after fully appear
        // this mechanism allows to avoid bad bonuses when appearing
        // but leaves possibility to catch disappearing bonus too (wanted)
        function doBonusActive(whichOne){
            bonus = whichOne;
        }


        // remove existing (displayed) bonus
        function destroyBonus(inWhichWay){
            jBonus(bonus, 0);
            var bonusek = document.getElementById("hideIt"+inWhichWay);
            bonusek.beginElement();
            document.getElementById('soundShow').play();
            bonus = -1;
            if (!kill) {
                bonusTime = setTimeout('fBonus()', 4000);
            }
        }

        // move bonus to the new location according to the bonus value
        function jBonus(whichOne, yTrans){
            var bonusek = document.getElementById('strawberry');
            bonusek.setAttribute("transform", "translate("+((whichOne*100)+40)+",0)");
            // solve alse y axis appearing method
            if (yTrans!=0){
                animate = document.createElementNS(svgns, "animateTransform");
                animate.setAttributeNS(null, "attributeName", "transform");
                animate.setAttributeNS(null, "type", "translate");
                animate.setAttributeNS(null, "values", "0,"+yTrans+"; 0,0");
                animate.setAttributeNS(null, "dur", "1s");
                animate.setAttributeNS(null, "additive", "sum");            
                animate.setAttributeNS(null, "repeatCount", "1");
                animate.setAttributeNS(null, "fill", "freeze");
                animate.setAttributeNS(null, "begin", document.documentElement.getCurrentTime());
                bonusek.appendChild(animate);
            }
        }

        // (starting) select which crocodile and call visualization with appropriate time offset
        // run turtle looking and diving animations, croc's appearing too
        function movoneTurtleCroc() {
            var how = Math.round(Math.random()*(howManyTurtles-1))+1;
            var how2 = 0;

            var oneTurtle = document.getElementById("oneTurtle"+how);

            // prepare turtle's looking animation
            var animate1 = document.createElementNS(svgns, "animateTransform");
            animate1.setAttributeNS(null, "attributeName", "transform");
            animate1.setAttributeNS(null, "type", "rotate");
            
            // hacking because of not working keyTimes
            animate1.setAttributeNS(null, "values", "0 60 0;-15 60 0;-13 60 0;0 60 0");
            //animate1.setAttributeNS(null, "values", "0 60 0;-13 60 0;-15 60 0;-13 60 0;0 60 0");
            //animate1.setAttributeNS(null, "keytimes", "0;0.19;0.465;0.885;1");
            animate1.setAttributeNS(null, "dur", (((11-level)/10)*3*crocUpDown) + "ms");
            animate1.setAttributeNS(null, "additive", "sum");
            animate1.setAttributeNS(null, "repeatCount", "1");
            animate1.setAttributeNS(null, "begin", document.documentElement.getCurrentTime());


            // prepare turtle's diving animation
            animate2 = document.createElementNS(svgns, "animateTransform");
            animate2.setAttributeNS(null, "attributeName", "transform");
            animate2.setAttributeNS(null, "type", "translate");

            // hacking because of not working keyTimes
            animate2.setAttributeNS(null, "values", "0,0; 0,0; 0,0; 0;0; -10,46; -10,44; 0,0");
            //animate2.setAttributeNS(null, "values", "0,0; 0,0; -10,46; -10,44; 0,0");
            //animate2.setAttributeNS(null, "keytimes", "0;0.49;0.81;0.89;1");
            animate2.setAttributeNS(null, "dur", (((11-level)/10)*3*crocUpDown) + "ms");
            animate2.setAttributeNS(null, "additive", "sum");            
            animate2.setAttributeNS(null, "repeatCount", "1");
            animate2.setAttributeNS(null, "begin", document.documentElement.getCurrentTime());

            var croc = document.getElementById("crocodille"+how);

            // prepare croc's appearing animation
            animate3 = document.createElementNS(svgns, "animateTransform");
            animate3.setAttributeNS(null, "attributeName", "transform");
            animate3.setAttributeNS(null, "type", "translate");

            // hacking because of not working keyTimes
            animate3.setAttributeNS(null, "values", "0,0; 0,0.; 0,-27; 0,-27; 0,-4; 0,0; 0,0");
            //animate3.setAttributeNS(null, "values", "0,0; 0,0.; 0,-27; 0,0; 0,0");
            //animate3.setAttributeNS(null, "keytimes", "0;0.245;0.475;0.66;1");
            animate3.setAttributeNS(null, "dur", (((11-level)/10)*3*crocUpDown) + "ms");
            animate3.setAttributeNS(null, "additive", "sum");            
            animate3.setAttributeNS(null, "repeatCount", "1");
            animate3.setAttributeNS(null, "begin", document.documentElement.getCurrentTime());

            // test for next croc / if yes, appended 
            if (level>=whenStart2ndCroc) {
                how2 = how;
                while ((how2>=how-1) && (how2<=how+1)) {
                    how2 = Math.round(Math.random()*(howManyTurtles-1))+1;
                }
                // point to the another croc and turtle
                var oneTurtle2 = document.getElementById("oneTurtle"+how2);
                var croc2 = document.getElementById("crocodille"+how2);
                // and apply animations to them
                oneTurtle2.appendChild(animate1.cloneNode(true));
                oneTurtle2.appendChild(animate2.cloneNode(true));
                croc2.appendChild(animate3.cloneNode(true));
            }

            // apply animations to the croc and turtle
            oneTurtle.appendChild(animate1);
            oneTurtle.appendChild(animate2);
            croc.appendChild(animate3);

            // a bit faster
            if (!kill) {
                setTimeout('beginCrocodile('+how+',false)', (((11-level)/10)*(crocUpDown+(crocUpDown*0.5))) );
                setTimeout('beginCrocodile('+how2+',true)', (((11-level)/10)*(crocUpDown+(crocUpDown*0.5))) );
            }
        }

        // begin croc's animation
        function beginCrocodile(whichOne, secondCroc) {

            document.getElementById("bubble").play();

            if (!secondCroc) {
                crocodile = whichOne;
                if (!kill)
                    setTimeout('stopCrocodile(false)', (((11-level)/10)*(crocUpDown+(crocUpDown*0.3))) );
            } else {
                crocodile2nd = whichOne;
                if (!kill)
                    setTimeout('stopCrocodile(true)', (((11-level)/10)*(crocUpDown+(crocUpDown*0.3))) );
            }
        }

        // stops turtle's / croc's killing time, recall cycle again
        function stopCrocodile(secondCroc) {
            if (!secondCroc) {
                crocodile = 0;
            } else {
                crocodile2nd = 0;
            }

            if (!kill && !secondCroc) {
                movoneTurtleCroc();
            }
        }

        // incrementing and displaying score status
        function showScore(points) {
            score += points;
            fScore.data = score;
        }

        // reseting opened banks and call randomly for unlock them again
        function closeBanks(limit) {
            var modifier = ((Math.round(Math.random()*9)-limit)+2);
            if (modifier<0)
                modifier *= -1;
            var removeServe = (rightBankOpen) ? "Right" : "Left";
            var leave = document.getElementById("serveOut"+removeServe);

            leave.beginElement();
            rightBankOpen = 0;
            leftBankOpen = 0;

            // set minimal and maximal range
            if (modifier<2)
                modifier = 2;
            if (modifier>6)
                modifier = 6;

            var undb = document.getElementById("logFile").firstChild;
            undb.data += ",p" + modifier;

            bankTime = setTimeout("unlockBanks()", modifier*1000);
        }

        // unlocking banks to open
        function unlockBanks() {
            timeToOpenBank = true;
        }


        // main collision / event's checking function
        function check() {

            // make banks accessible in random time
            if (timeToOpenBank) {
                timeToOpenBank = false;
                var timeIndex = Math.round(Math.random()*4)+2;
                if (goRight) {
                    rightBankOpen = 1;
                    document.getElementById("serveInRight").beginElement();
                } else {
                    leftBankOpen = 1;
                    document.getElementById("serveInLeft").beginElement();
                }
                var undb = document.getElementById("logFile").firstChild;
                undb.data += ",s" + timeIndex;

                bankTime = setTimeout("closeBanks("+timeIndex+")", timeIndex*1000);
            }

            if (score>=nextLifeRange) {
                nextLifeRange += 100;
                lives++;
                document.getElementById("soundLevel").play();

                var textX = document.getElementById("lives").firstChild;
                textX.data = lives;
                fStatus.data = "Gained extra life";
            }

            // id deatch, in which way
            var death = "";

            if (!kill) {
                // check death by crocodille
                if (((crocodile == position) && crocodile && !inTheAir) || 
                    ((crocodile2nd == position) && crocodile2nd && !inTheAir))  {
                    var tmpr = ((crocodile) ? crocodile : crocodile2nd);
                    var croc = document.getElementById("crocodille" + tmpr);
                    //croc.setAttribute("fill", "red");
                    croc.setAttribute("y", "-50");
                    death = "killingByCroc";
                }

                // check death by lightning
                if (position == lightning) {
                    // log problematic lightning statuses
                    text = document.getElementById("logFile").firstChild;
                    text.data += " ; Position: " + position + " prevPos: " + prevPos +" cloudPos: "+ cloudPos +" lightning: "+ lightning;
                    death = "killingByLightning";
                }
    
                // check death by negativeBonus
                if (!bonusType && (position == bonus) && !inTheAir) {
                    death = "killingByBonus";
                }
            }

            if (death) {
                kill = true;
                //clearTimeout(bonusTime);
                restrict = true; // reserve some time
                setTimeout('removeRestriction()', 2200); // as long as animation lasts

                var figure = document.getElementById("panacek");
                var killing = document.getElementById(death);
                killing.beginElement();
                document.getElementById('soundKill').play();

                resetOffset += (resetOffset==0) ? (1*(position+1)*(-100)) : (1*(position)*(-100));

                fStatus.data = "Life lost.   Click to continue the game.";
                lives--;

                if(!lives){
                    callEnd();
                }

            } else {
                setTimeout('check(false)', 100);
            }


            // destroy bonuses to not hold in the air
            if (((bonus==crocodile) && (bonus!=position)) || ((bonus==crocodile2nd) && (bonus!=position))) {
                clearTimeout(bonusTime);
                destroyBonus("ByCroc");
            }

            if ((position == bonus) && !inTheAir){
                clearTimeout(bonusTime);
                destroyBonus("ByGet");
                // increment points only when positive bonus reached
                if (bonusType) {
                    document.getElementById("bonusPoints").beginElement();
                    document.getElementById("soundBonus").play();
                    showScore(2);
                }
            }

            if(goRight && (position==(howManyTurtles+1))){
                showScore(3);
                document.getElementById("loadDown").beginElement();
                document.getElementById("soundPerfect").play();
                document.getElementById("standardPoints").beginElement();
                goRight = false;
                goLeft = true;
                rightBankOpen = false;
                document.getElementById("serveOutRight").beginElement();
                clearTimeout(bankTime);
                unlockBanks();
                
            }

            if(goLeft && (position==0)){
                showScore(3);
                crossing++;
                var text = document.getElementById("nextLevels").firstChild;
                text.data = "" + (crossing%3) + "/3";
                document.getElementById("loadUp").beginElement();
                document.getElementById("standardPoints").beginElement();
                document.getElementById("soundGreat").play();
                goRight = true;
                goLeft = false;
                leftBankOpen = false;
                document.getElementById("serveOutLeft").beginElement();
                clearTimeout(bankTime);
                unlockBanks();

                // increase levels
                if (!(crossing%3)){
                    level++;
                    panSpeed -= 25;
                    document.getElementById("soundLevel").play();
                    fStatus.data = "Reached level " + level;
                    var text = document.getElementById("level").firstChild;
                    text.data = level;
                }

            }

        }

        // run final actions after death, like hall of fame etc...
        // if inmterrupted, game was interrupted - show only Hall of Fame
        function callEnd(interrupted) {
            lives--;
            fStatus.data = "GAME OVER with "+ score +" points.   Click for new game.";
            setTimeout('document.getElementById("soundEnd").play()', 1250);
            if (score>0 && !interrupted) {
                setTimeout('document.getElementById("showSignaturing").beginElement()', 2900);
            } else 
                if (!interrupted) {
                    setTimeout('submitName("")', 2750);
                } else {
                    submitName("");
                }

        }

        // basic (left and right) moves catching and evaluation function
        function press(evt) {

            //alert(evt.keyCode);

            // enter, invoke start game...
            if (evt && evt.keyCode==13) {
                start(null);
                return false;
            }

            // escape pressed, call the game's end
            if (evt && evt.keyCode==27 && !kill) {
                lives = 0;
                kill = true;
                callEnd(true);
                return false;
            }

            var pressedKey = evt.keyCode;
            
            //alert(pressedKey + allowMove + kill);

            // do actions, if allowed
            if (allowMove && inRange(pressedKey) && !kill) {
                // right move
                if (pressedKey==39){
                    moveRight();
                }

                // left move
                if (pressedKey==37){
                    moveLeft();
                }
            }
        }

        // prepare figure move left with reservating inTheAir flag
        function moveLeft(){
            //alert('left');
            jumpDir = 0;

            document.getElementById("soundWay").play();

            var figure = document.getElementById("panacek");
            figure.setAttribute("transform", "skewX(10)");

            animate = document.createElementNS(svgns, "animate");
            animate.setAttributeNS(null, "attributeName", "x");
            animate.setAttributeNS(null, "by", "-100");
            animate.setAttributeNS(null, "dur", panSpeed + "ms");
            animate.setAttributeNS(null, "repeatCount", "1");
            animate.setAttributeNS(null, "fill", "freeze");
            animate.setAttributeNS(null, "restart", "whenNotActive");
            animate.setAttributeNS(null, "begin", document.documentElement.getCurrentTime());
            animate2 = document.createElementNS(svgns, "animate");
            animate2.setAttributeNS(null, "attributeName", "y");
            animate2.setAttributeNS(null, "values", "0;-20;0");
            animate2.setAttributeNS(null, "dur", (panSpeed*1.2) + "ms");
            animate2.setAttributeNS(null, "repeatCount", "1");
            animate2.setAttributeNS(null, "fill", "freeze");
            animate2.setAttributeNS(null, "restart", "whenNotActive");
            animate2.setAttributeNS(null, "begin", document.documentElement.getCurrentTime());

            figure.appendChild(animate);
            figure.appendChild(animate2);

            document.getElementById("lnoha").beginElement();

            reserveMove();
            inTheAir = true; // reseting
            setTimeout('setPosition(-1)', (panSpeed*0.88));
        }

        // prepare figure move right with reservating inTheAir flag
        function moveRight(){
            //alert('right');
            jumpDir = 1;

            document.getElementById("soundWay").play();

            var figure = document.getElementById("panacek");
            figure.setAttribute("transform", "skewX(-5)");

            animate = document.createElementNS(svgns, "animate");
            animate.setAttributeNS(null, "attributeName", "x");
            animate.setAttributeNS(null, "by", "100");
            animate.setAttributeNS(null, "dur", panSpeed + "ms");
            animate.setAttributeNS(null, "repeatCount", "1");
            animate.setAttributeNS(null, "fill", "freeze");
            animate.setAttributeNS(null, "restart", "whenNotActive");
            animate.setAttributeNS(null, "begin", document.documentElement.getCurrentTime());
            animate2 = document.createElementNS(svgns, "animate");
            animate2.setAttributeNS(null, "attributeName", "y");
            animate2.setAttributeNS(null, "values", "0;-20;0");
            animate2.setAttributeNS(null, "dur", (panSpeed*1.2) + "ms");
            animate2.setAttributeNS(null, "repeatCount", "1");
            animate2.setAttributeNS(null, "fill", "freeze");
            animate2.setAttributeNS(null, "restart", "whenNotActive");
            animate2.setAttributeNS(null, "begin", document.documentElement.getCurrentTime());

            figure.appendChild(animate);
            figure.appendChild(animate2);

            document.getElementById("lnoha").beginElement();

            reserveMove();
            inTheAir = true; // reseting
            setTimeout('setPosition(1)', (panSpeed*0.88));
        }

        // set position with delay according to the speed/length of figure's animation
        function setPosition(howmany) {
            prevPos = position;
            position += howmany;
            inTheAir = false;
        }

        // periodically invoked function to monitor cloud's position and
        // setting lightning (sometimes)
        function checkCloudPosition() {
            var lightTime = 0;
            var direction = 1;

            if (!kill) {
                // decide about lightning
                if ((level>=whenStartLightning) && allowLightning) {
                    if (Math.round(Math.random()) && !kill) {
                        lightning = cloudPos;
                        allowLightning = false;
                        document.getElementById("flashing").beginElement();
                        document.getElementById('soundFlashing').play();
                        setTimeout("removeLightning()", 750); // fixed value for now
                        lightTime = 750;
                    }
                }
    
                // keep only reserved range
                if (cloudDirection == "right"){
                    cloudPos++;
                    cloudDirection = (cloudPos==6) ? "left" : "right";
                } else {
                    cloudPos--;
                    cloudDirection = (cloudPos==1) ? "right" : "left";
                    direction = -1;
                }
    
                // call moving
                lightningHolder = setTimeout("CloudLightningPos("+direction+")", lightTime);
    
                cloudHolder = setTimeout('checkCloudPosition()', cloudSpeed + lightTime);
            }
        }

        // reset lightning and set minimum delay between next lightning
        function removeLightning() {
            lightning = -1;
            //                                                  // debug!!
            setTimeout("fAllowLightning()", (Math.round(Math.random())+1+((11-level)/10))*1000 );
        }

        // move cloud and lightning to the new location
        function CloudLightningPos(direction){
            if (!kill) {
                var cloud2 = document.getElementById("cloud");
                animate = document.createElementNS(svgns, "animate");
                animate.setAttributeNS(null, "attributeName", "x");
    
                // just debug
                var text = document.getElementById("cloudActualSpeed").firstChild;
                text.data = 100*direction;
    
                animate.setAttributeNS(null, "by", 100*direction);
                animate.setAttributeNS(null, "dur", cloudSpeed+"ms");
                animate.setAttributeNS(null, "repeatCount", "1");
                animate.setAttributeNS(null, "fill", "freeze");
                animate.setAttributeNS(null, "restart", "whenNotActive");
                animate.setAttributeNS(null, "begin", document.documentElement.getCurrentTime());
                cloud2.appendChild(animate);
            }
        }

        // enables lightning
        function fAllowLightning() {
            allowLightning = true;
        }

        // in the first branche run and reset all, in second one do only partial reseting
        function start(click_evt) {
            // first initialize
            if (lives==-1 && !restrict) {

                allowMove = true;
                kill = false;
                crocUpDown = 1000;
                score = 0;
                goRight = true;
                goLeft = false;
                inTheAir = false;
                lives = 3;
                level = 1;
                panSpeed = 500 - ((level-1)*25);
                crossing = 0;
                position = 0;
                prevPos = -1;
                crocodile = 0;
                crocodile2nd = 0;
                bonus = -1;
                if(bonusTime)
                    clearTimeout(bonusTime);
                score = 0;
                resetOffset = -100;
                cloudPos = 1;
                lightning = -1;
                allowLightning = true;
                cloudDirection = "right";
                leftBankOpen = 0;
                rightBankOpen = 0;
                timeToOpenBank = false;

                // reinitialize
                init();
                var rebirth = document.getElementById("rebirth");
                rebirth.beginElement();

                document.getElementById("soundStart").play();

                // reset all official counters
                var textX = document.getElementById("lives").firstChild;
                textX.data = lives;
                fScore.data = score;
                textX = document.getElementById("level").firstChild;
                textX.data = level;
                var text = document.getElementById("nextLevels").firstChild;
                text.data = "" + (crossing%3) + "/3";

                document.getElementById("loadUp").beginElement();

                fStatus.data = "New game started";

                // number of remaining lives
                nextLifeRange = 100;

                // run crocodile for the first time
                setTimeout('movoneTurtleCroc()', crocUpDown);

                // run cyclus of bonusing
                bonusTime = setTimeout('fBonus()', 4000);

                // set for the first time unlocking the banks
                bankTime = setTimeout("unlockBanks()", 2000);

                // run cyclus of checking
                setTimeout('check()', 100);

                lightningHolder = null;
                cloudHolder = setTimeout('checkCloudPosition()', 0);

                // hide help / hall of fame, at the beginning (if visible)
                document.getElementById("hideHallOfFame").beginElement();
                document.getElementById("hideHelp").beginElement();

            } else 
                if (kill && lives!=-1 && !restrict) {
                // reset during game

                    allowMove = true;
                    kill = false;
                    goRight = true;
                    goLeft = false;
                    inTheAir = false;
                    position = 0;
                    prevPos = -1;
                    leftBankOpen = 0;
                    rightBankOpen = 0;
                    timeToOpenBank = false;
                    lightning = -1;
                    allowLightning = true;
                    crocodile = 0;
                    crocodile2nd = 0;
                    cloudPos = 1;
                    cloudDirection = "right";
                    if(bonusTime)
                        clearTimeout(bonusTime);
                    bonus = -1;

                    var textX = document.getElementById("lives").firstChild;
                    textX.data = lives;

                    fStatus.data = "Current game continued";

                    // reinitialize
                    init();
                    var rebirth = document.getElementById("rebirth");
                    rebirth.beginElement();

                    document.getElementById("soundStart").play();

                    document.getElementById("loadUp").beginElement();

                    // run crocodile for the first time
                    setTimeout('movoneTurtleCroc()', crocUpDown);

                    // run cyclus of bonusing
                    setTimeout('fBonus()', 4000);

                    // set for the first time unlocking the banks
                    bankTime = setTimeout("unlockBanks()", 4000);

                    // run cyclus of checking
                    setTimeout('check()', 100);

                    if (cloudHolder)
                        clearTimeout(cloudHolder);
                    if (lightningHolder)
                        clearTimeout(lightningHolder);
                    cloudHolder = setTimeout('checkCloudPosition()', 0);

                    // hide help / hall of fame, at the continue (if visible)
                    document.getElementById("hideHallOfFame").beginElement();
                    document.getElementById("hideHelp").beginElement();

                }

        }


        // preserve standard context menu opening
        function HideContextMenu(mousedown_evt) {
            mousedown_evt.preventDefault();
        }

        // initializing the new game function (create most elements again)
        function init() {

            var roneTurtle = document.getElementById('oneTurtle');
            var rCroc = document.getElementById('crocodille');
            var pool = document.getElementById("pool");

            // clear all subnodes in pool
            while (pool.childNodes.length>0) {
                pool.removeChild(pool.firstChild);
            }

            for(var i = 1; i<=howManyTurtles; i++){
                addMyNode(roneTurtle, pool, 'oneTurtle'+i, (100*(i-1)), 0, false );
                addMyNode(rCroc, pool, 'crocodille'+i, (100*(i-1))-153, 50, 'green' );
            }

            // add figure
            newNode = document.createElementNS(svgns, "use");
            newNode.setAttributeNS(null, "x", "-100");
            newNode.setAttributeNS(null, "y", "0");
            newNode.setAttributeNS(xlinkns, "xlink:href", "#figure");
            newNode.setAttributeNS(null, "id", "panacek");
            pool.appendChild(newNode);
            // add hladina
            var newNode = document.createElementNS(svgns, "rect");
            newNode.setAttributeNS(null, "x", "-10");
            newNode.setAttributeNS(null, "y", "50");
            newNode.setAttributeNS(null, "width", "610");
            newNode.setAttributeNS(null, "height", "45");
            newNode.setAttributeNS(null, "fill", "#0000CC");
            newNode.setAttributeNS(null, "stroke", "none");
            pool.appendChild(newNode);
            var newNode = document.createElementNS(svgns, "rect");
            newNode.setAttributeNS(null, "x", "-10");
            newNode.setAttributeNS(null, "y", "70");
            newNode.setAttributeNS(null, "width", "610");
            newNode.setAttributeNS(null, "height", "25");
            newNode.setAttributeNS(null, "fill", "#0000AA");
            newNode.setAttributeNS(null, "stroke", "none");
            pool.appendChild(newNode);
            newNode = document.createElementNS(svgns, "rect");
            newNode.setAttributeNS(null, "x", "-10");
            newNode.setAttributeNS(null, "y", "45");
            newNode.setAttributeNS(null, "width", "610");
            newNode.setAttributeNS(null, "height", "5");
            newNode.setAttributeNS(null, "fill", "#0000AA");
            newNode.setAttributeNS(null, "fill-opacity", 0.5);
            newNode.setAttributeNS(null, "stroke", "none");
            pool.appendChild(newNode);
            // add strawberry to the layout
            newNode = document.createElementNS(svgns, "use");
            newNode.setAttributeNS(null, "x", "-100");
            newNode.setAttributeNS(null, "y", "-30");
            newNode.setAttributeNS(xlinkns, "xlink:href", "#strawberry");
            newNode.setAttributeNS(null, "display", "block");
            pool.appendChild(newNode);

            // add cloud
            newNode = document.createElementNS(svgns, "use");
            newNode.setAttributeNS(null, "id", "cloud");
            newNode.setAttributeNS(null, "x", "-2");
            newNode.setAttributeNS(null, "y", "-99");
            newNode.setAttributeNS(xlinkns, "xlink:href", "#clouder");
            newNode.setAttributeNS(null, "fill", "#1F9AFF");
            pool.appendChild(newNode);

        }

        // internal function to creating crocs and turles by cloning mechanism
        function addMyNode(mNode, mParent, id, x, y, fill) {
            var newNode = mNode.cloneNode(true);
            newNode.setAttribute('id', id );
            newNode.setAttribute('transform', 'translate('+x+','+y+')' );
            if (fill) {
                newNode.setAttribute('fill', fill );
            } else {
            // add a little animate moving to the turtles randomly
                var delay = (document.documentElement.getCurrentTime()*1000) + Math.round((Math.random()*Math.random())*1000);
                // log statuses
                //var text = document.getElementById("logFile").firstChild;
                //text.data += " ; Time " + document.documentElement.getCurrentTime()*1000 + " Delay " + delay;
                //document.documentElement.getCurrentTime();

                animate = document.createElementNS(svgns, "animateTransform");
                animate.setAttributeNS(null, "attributeName", "transform");
                animate.setAttributeNS(null, "type", "translate");
                animate.setAttributeNS(null, "values", ""+x+",0; "+x+",3; "+x+",-2; "+x+",0");
                animate.setAttributeNS(null, "dur", "2s");
                animate.setAttributeNS(null, "repeatCount", "indefinite");
                animate.setAttributeNS(null, "begin", + delay+"ms" );
                newNode.appendChild(animate);
            }
            mParent.appendChild(newNode);
        }


        // display logging info
        function changeVisibility(idName, toWhat) {
            var someLayer = document.getElementById(idName).setAttribute("display", toWhat);
        }

        // changing all - box properties
        function changeAll(todo) {
            var envelope = document.getElementById("envelope");
            if (todo==1) {
                envelope.setAttribute("text-rendering", "optimizeSpeed");
                envelope.setAttribute("shape-rendering", "optimizeSpeed");
            }
            if (todo==0) {
                envelope.setAttribute("text-rendering", "optimizeLegibility");
                envelope.setAttribute("shape-rendering", "auto");
            }
            if (todo==2) {
                envelope.setAttribute("text-rendering", "geometricPrecision");
                envelope.setAttribute("shape-rendering", "geometricPrecision");
            }
        }

        // changing zooming of envelope
        function envZoom(view) {
            var envelope = document.getElementById("envelope");
            envelope.setAttribute("transform", "scale("+view+") translate(20,0)");
        }

        // just debugging some variables to the screen
        function debug() {
            var text = document.getElementById("position").firstChild;
            text.data = position;
            text = document.getElementById("crocodile").firstChild;
            text.data = crocodile;
            text = document.getElementById("inTheAir").firstChild;
            text.data = inTheAir;
            text = document.getElementById("resetOffset").firstChild;
            text.data = resetOffset;
            text = document.getElementById("bonus").firstChild;
            text.data = bonus;
            text = document.getElementById("kill").firstChild;
            text.data = kill;
            text = document.getElementById("bonusTime").firstChild;
            text.data = bonusTime;
            text = document.getElementById("crossing").firstChild;
            text.data = crossing;
            text = document.getElementById("nextLifeRange").firstChild;
            text.data = nextLifeRange;
            text = document.getElementById("lightningDeb").firstChild;
            text.data = lightning;
            text = document.getElementById("cloudPos").firstChild;
            text.data = cloudPos;
            text = document.getElementById("cloudDirection").firstChild;
            text.data = cloudDirection;
            text = document.getElementById("timeToOpenBank").firstChild;
            text.data = timeToOpenBank;
            text = document.getElementById("leftBankOpen").firstChild;
            text.data = leftBankOpen;
            text = document.getElementById("rightBankOpen").firstChild;
            text.data = rightBankOpen;
            text = document.getElementById("allowLightning").firstChild;
            text.data = allowLightning;
            text = document.getElementById("bonusType").firstChild;
            text.data = bonusType;
            text = document.getElementById("cloudHolder").firstChild;
            text.data = cloudHolder;
            text = document.getElementById("lightningHolder").firstChild;
            text.data = lightningHolder;
            text = document.getElementById("crocodile2nd").firstChild;
            text.data = crocodile2nd;
            text = document.getElementById("prevPos").firstChild;
            text.data = prevPos;

            // call debugging again
            setTimeout('debug()', 200);
        }

/* ************************************************************************* */
/* ********************  FUNCTION SECTION END  ***************************** */
/* ************************************************************************* */

    ]]></script>

<!-- **************************** TEMPLATES ******************************* -->
<defs>
		<g id="oneTurtle" fill="#25DF00">
        	<g id="oldTurtle">
    			<path d="M65.2,10.8c2.8,1.6,6.3,1.2,9.6,1.2c-1.8,2.3-6.7,1.7-10.1,1.7c2.1,2,15.6,7.6,6.6,11c-7.4,2.8-9.9-6.8-15-9.7c-3-1.7-16.6-3.3-19.6-1.4c-2.5,1.5-3,5.3-5.9,7.1c-2.9,1.8-6.7,1.3-9.9,1.1c-1.1-5.7,5.5-10.7,9.4-12"/>
    			<path fill="#9F7800" d="M28.7,8.6c5-5.9,12.3-9.3,20.8-7.8c-0.7-0.1,9.3,3.9,9.2,3.8c3.7,2.4,6.4,2.1,6.9,7.8C53.1,17.8,42,13.3,30.7,9.6"/>
    			<path d="M29.7,7.1c-4.6,0.2-9.8-0.6-13.9-2.6c-2.3-1.2-3.2-2.8-6.2-3.4c-3.9-0.7-10.6,2.2-9,7.5c2.1,6.7,22.1,3,27.5,3"/>
                <circle cx="8" cy="5" r="1.3" stroke="none" fill="black" />
            </g>
		</g>

    	<g id="nakladX" stroke="#000000">
            <g transform="scale(0.11) translate(-150 -66)">
        		<path fill="#0062DF" stroke-width="4" d="M14.5,36c7.9-14.9,15.7-20.6,29.8-28.2c9.3-5,11.4-7.3,22.2-4.5c15.3,4,29.1,5.2,45,5.8c20,0.7,37.3-8.4,56-8c20,0.5,23,20.6,17.2,37.1c-2.1,5.8-6.1,10-7.2,15.9c-1.2,5.8,0,13.1,0,19c0,13.4,3,22.6,9.2,34c14,25.6-10.2,39.5-29.2,53"/>
        		<path fill="none" stroke-width="4" d="M147.5,37c2.9-7,11.2-9.2,17.2-12.8c5.5-3.3,10.1-9.9,14.8-12.2"/>
        		<path fill="#1F9AFF" stroke-width="4" d="M11.5,63c-0.1,16.8,4.5,33.2,2.8,50.9C12.9,128-4,152.4,2.5,165.8c7.4,15.2,35.9,1.4,48,0.2c20.1-2.1,41.3,0.5,60,3.8c14.5,2.5,35.1,6.4,44.7-9.2c7.7-12.4-5.1-31.3-11.5-40.9c-9-13.5-9.1-31-6.5-47.7c2.1-13.4,22-32.2,2.5-38.2
        			c-24.8-7.6-60.6,1.6-85.2,4.3c-9.5,1-31.3-3.3-40.1,0.9c-9.8,4.8-4.4,15.8-2.9,23"/>
            </g>
    	</g>

		<g id="figure" opacity="1" transform="translate(0,-105)">

			<path d="M49.7,79.1c-9,5.3-17.5,24.8-1.4,25.4c8.5,0.3,10-4.6,10.4-11.9c0.1-2.5,1.6-7.5,0.1-9.6c-1.9-2.7-6.2-0.9-7.6-2.9" fill="#F96806" />

            <g id="myHlava" transform="translate(-2 ,-0.5)">
    			<path d="M57.7,82.6c10.9-4.3,10.3-16.4-2.5-15.5c-4.1,0.3-10.4,2.6-8.4,8.4c1.2,3.5,8.2,6.2,11.4,6.6" fill="#FFC23F">
                    <animate begin="killingByBonus.begin" attributeName="fill" values="#FFC23F;#00FF00;#0000FF" dur="2s" repeatCount="1" />
    			</path>
                <circle cx="54" cy="72" r="1.3" stroke="none" fill="black" />
                <circle cx="61" cy="72" r="1.3" stroke="none" fill="black" />
                <circle cx="58" cy="76" r="0.5" stroke="none" fill="gray" />
                <animateTransform id="lhlava" attributeName="transform" type="rotate" from="0,3,0" to="-3,0,-3" dur="0.6s" repeatCount="1" begin="lniha.begin" /> 
            </g>

			<path d="M43.2,103.1c-3.5,0.3-19.2-5.1-11.7,3.7c2.9,3.4,17.3,5.3,13.2-1.7" fill="#93926D">
                <animateTransform id="lnoha" attributeName="transform" type="rotate" from="0,-5,0" to="-3,0,-3" dur="0.6s" repeatCount="1" begin="indefinite" /> 
			</path>
			<path d="M53.2,103.6c-5.3-0.3-6.1,4.7-1.5,6.5c5.1,2,8.4-1,12.9-2.1c0.2-0.8,0.2-2,0-2.8c-3.7-0.8-7.9-2-11.9-1.6" begin="indefinite" fill="#93926D">
                <animateTransform id="rnoha" attributeName="transform" type="rotate" from="0,5,0" to="3,0,3" dur="0.6s" repeatCount="1" begin="lnoha.begin" /> 
			</path>
            <g>
    			<path d="M46.2,87.1c0.3-5-9-5.7-9.5-0.5c-0.6,5.4,8.7,6.5,9.5,1" fill="#FFC23F">
                    <animateTransform id="lruka" attributeName="transform" type="rotate" from="0,8,0" to="8,0,8" dur="0.6s" repeatCount="1" begin="lnoha.begin" /> 
                    <animate begin="killingByBonus.begin" attributeName="fill" values="#FFC23F;#00FF00;#0000FF" dur="2s" repeatCount="1" />
    			</path>
    			<path d="M66.1,89.3c0.3-5-9-5.7-9.5-0.5c-0.6,5.4,8.7,6.5,9.5,1" fill="#FFC23F">
                    <animateTransform id="rruka" attributeName="transform" type="rotate" from="0,-8,0" to="-8,0,-8" dur="0.6s" repeatCount="1" begin="lnoha.begin" /> 
                    <animate begin="killingByBonus.begin" attributeName="fill" values="#FFC23F;#00FF00;#0000FF" dur="2s" repeatCount="1" />
    			</path>
                <animateTransform id="handeHoch" attributeName="transform" type="translate" by="0 -24" dur="1.6s" repeatCount="1" begin="killingByCroc.begin" /> 
            </g>

            <use xlink:href="#nakladX" x="58" y="86" display="none">
                <animateTransform id="run" attributeName="transform" type="rotate" from="0,16,0" to="6,0,6" dur="0.6s" repeatCount="1" begin="lnoha.begin" /> 
                <animate id="loadUp" attributeName="x" from="-58" to="58" dur="0.4s" repeatCount="1" begin="indefinite" />
                <set begin="loadUp.begin" attributeName="display" to="block" />

                <animate id="loadDown" attributeName="x" from="58" to="168" dur="0.3s" repeatCount="1" begin="indefinite" />
                <set begin="loadDown.end" attributeName="display" to="none" />

                <animate id="loadKill" begin="killingByLightning.begin; killingByBonus.begin; killingByCroc.begin" attributeName="x" by="20" dur="1.6s" repeatCount="1" />
                <animate begin="loadKill.begin" attributeName="y" by="16" dur="1.6s" repeatCount="1" />
            </use>

            <!-- text when getting positive points -->
            <text x="38" y="77" stroke="red" display="none">3
                <set id="standardPoints" begin="indefinite" attributeName="display" to="block" />
                <animate begin="standardPoints.begin" attributeName="stroke" values="#ff0000;#ffffff" dur="0.65s" repeatCount="1" />
                <animate begin="standardPoints.begin" attributeName="y" by="-30" dur="0.65s" repeatCount="1" />
                <set begin="standardPoints.begin+0.65s" attributeName="display" to="none" />
            </text>

            <!-- text when getting positive points -->
            <text x="38" y="77" stroke="red" display="none">2
                <set id="bonusPoints" begin="indefinite" attributeName="display" to="block" />
                <animate begin="bonusPoints.begin" attributeName="stroke" values="#ff0000;#ffffff" dur="0.65s" repeatCount="1" />
                <animate begin="bonusPoints.begin" attributeName="y" by="-30" dur="0.65s" repeatCount="1" />
                <set begin="bonusPoints.begin+0.65s" attributeName="display" to="none" />
            </text>

            <animateTransform id="killingByLightning" attributeName="transform" type="translate" from="0 0" to="0 -89" begin="indefinite" dur="1.6s" repeatCount="1" additive="sum" />
            <animateTransform  begin="killingByLightning.begin" attributeName="transform" type="scale" from="1 1" to="0.2 1" dur="1.6s" repeatCount="1" additive="sum" />
            <set begin="killingByLightning.end" attributeName="opacity" to="0" />

            <animateTransform id="killingByBonus" attributeName="transform" type="scale" from="1 1" to="1.5 1.5" begin="indefinite" dur="1.6s" repeatCount="1" additive="sum" />
            <animateTransform begin="killingByBonus.begin" attributeName="transform" type="translate" by="-22 -22" dur="1.6s" repeatCount="1" additive="sum" />
            <set begin="killingByBonus.end" attributeName="opacity" to="0" />

            <animateTransform id="killingByCroc" attributeName="transform" type="translate" from="0,0" to="0,88" begin="indefinite" dur="1.6s" repeatCount="1" additive="sum" />
            <set begin="killingByCroc.end" attributeName="opacity" to="0" />

            <animate id="rebirth" begin="indefinite" attributeName="opacity" from="0" to="1" dur="0.36s" repeatCount="1" fill="freeze" />
		</g>

		<g id="crocodille">
		    <path d="M177.2,23.6c-0.1-3.6-5.5-24.4,1.4-22.9c1.6,4.5,2.1,15.6,5.1,18.5c3.8-4.8,7.5-11.8,8.6-18c2.3,2.7,1.1,12,0.9,15.9c-0.3,5.3-5.1,9.2-4.6,14.4c-4.4,0.7-12.9-0.8-12.4-6.4" stroke="black" />
        </g>

    	<g id="clouder">
        	<g fill="gold" stroke="#AA0000" display="none" id="lightning">
        		<path transform="scale(0.55) translate(32 48)" d="M34.3,0c0,13.3,1.6,19.9-12.8,22.1c0.5,1.9-0.8,4.8-0.3,6.7C11,26.6,12.6,41,3.1,38c6.2-0.2,11.9-0.1,17.2,3.2c-0.1-1.2,1.3-4.2,1.1-6c4.9,0.7,8.8-2.1,9-7c1.1-0.8,4.2-2.2,5.7-2.8c-0.4,5.9,0.8,12.2,3,17.5C29,46.1,34,50.3,32.5,57.8
        			c-1.4,7-9.8,10.8-6.4,20c-5.2,2.4-9.4,5.2-14.7,6.4C9.1,94.9,9.4,95.7,0.1,98c6.7,0.4,14.4-0.6,20.8-2.2c0.1-3.1,1.5-6.5,1.5-9.7c5.8-1.2,14.3-0.5,9.2-9c10.9-3.3,10.6-9.6,9-19.8c8.5,7.4,13.4,13.3,6.7,25.4c1.5,2.1,2.5,3.2,3.9,5.9c-0.2-5,4.1-8.2,4-12.6
        			c-0.1-3.3-4.7-12.9-6.2-16c-3.3-6.9-4.9-7.2-3.9-14c0.8-5.5,6.4-9.8,0.3-15.6c9.4-2.7,13.5,11.5,13.9,18.4c1.6-0.3,4.1,0.7,5.7,0.3c2.2,5.4,3.9,11,5.3,16.7c2.5-0.6,4.4-2.3,5.8-4.9C70.9,54.5,62,46.4,63.1,37.2c-7.9-0.5-4.1-6-6.9-10.2c-2.6-4-5.2-3.6-7-8
        			C47.3,14.2,50.9,9,46,5.2C42.8,2.7,37.1,4.4,33.3,3"/>
    		    <animate id="flashing" attributeName="fill" values="yellow;red;beige;red;yellow" dur="750ms" repeatCount="1" begin="indefinite" />
                <set begin="flashing.begin" attributeName="display" to="block" />
                <set begin="flashing.end" attributeName="display" to="none" />
        	</g>
		    <path transform="scale(0.75) translate(0,5)" stroke="none" d="M30.7,15.5C24.6,9,5.8,5.7,1.3,15.7c-4.5,9.9,11.4,13,17.7,10c-7.5-0.1-21.3,8.6-8.3,13.9c7.7,3.1,17.9,0.6,22-7c0-0.4,0-0.4-0.1,0c3,11.2,21.7,11.4,23.6-0.9c8.8,12.8,22.8,8.8,26.5-5c7.5,4.2,24.5,6.5,20.9-8.6
    		c-2.9-11.9-27.1-17.6-34.9-7.2c-0.5-6.1,1.1-6.7-4.5-8.4C60.9,1.3,56.5-0.3,53,0.9c-4.8,1.7-9.6,9-6.6,13.7c-3.2-2.9-3.1-4.5-7.4-5.5c-3-0.7-16.3-2.8-14.4,3.9c1.5,0.2,2.8,1.2,3.9,1.6"/>
    	</g>

        <g id="strawberry">
            <g id="positiveBonus" fill="#039F00" stroke-width="3" transform="scale(0.35) translate(-15 3)">
		        <path fill="#FF1F1F" d="M36,40.1c-11.1,1-23.4-5.1-31.5,6.5c-6.1,8.8-2,20.8,4.3,28c8.6,9.8,16.9,8.1,29.2,8.9c10.9,0.7,20.3,4.5,29.8-4.2c8.3-7.5,10.3-24.1,2.2-32.5c-9.3-9.6-24.7-10.5-36.7-5.3"/>
		        <path fill="none" d="M35.3,80.8c1.3-0.3,3.3,0,4.6,0.1c0.8,2.9-0.1,4.9-3.1,4.5c-0.5-1.2-0.9-2.6-0.8-3.9"/>
		        <path d="M37.3,40.1c0-5.2,1-11.3-1.5-15.9c-2.1-3.8-7.3-8.9-10.4-12.1C20.3,6.6,10.4,0.3,2.8,1.7c0.7,9,6.7,18.4,13.4,24.3c4.9,4.3,14,13.5,20.5,13.5"/>
		        <path d="M38.7,28.8c2.8-3.8,3.6-9.4,9.8-7.9c-6.7,4-9.1,6.6-11.8,13.9"/>
            </g>

            <g id="negativeBonus">
        		<g stroke-width="4" fill="#E0E0E0" transform="scale(0.36) translate(-29 23)">
        			<path d="M26.5,11.9C26.1,5.7,18-2.6,12.3,3.8c-5.7,6.4-0.8,14.7,6,16.9C12.1,21,7.9,17.8,4,24.1C1,29,2.7,33.8,8.5,35.3c5.7,1.5,9.8-2.1,14.7-3.4c8.2-2.2,9.3,1.6,14.5,5.5c9,6.8,22.7,10.8,32.8,16.3c3.7,2,9.7,4.3,11.9,8.1
        				c2.1,3.8-0.6,11.6,4.8,14.1c3.6,1.6,9.6-2.3,10.5-5.5c1.5-5.2-2.7-7.8-6.3-10.5c8.1,1,14.3-4.2,13-12.5C97.4,47,88.6,49.6,81.8,48c-6.5-1.6-12.3-6.9-17.5-10.6c-5.4-3.8-11.4-7.6-17-11c-6.6-4-14.6-6-19.5-11.8"/>
        			<path d="M77.5,15.2C78,11.3,79.1,7.6,80.9,4c1.3-0.4,4-0.4,5.4,0c1.5,3.7,1.3,9,0.4,12.8c6.2-0.7,12.1-4.2,15,2.3c3.7,8.2-2,11.3-8.1,12.1c-7.1,1-11.8-0.2-18.3,2.6c-4.8,2.1-9.3,5.4-13.9,7.8c-9.1,4.9-18.3,8.8-27.3,13.9c-2.8,1.6-6.6,2.7-8.9,4.8
        				c-2.5,2.3-2.6,7.1-4.2,8.5C16.4,73,7.8,71.7,5.8,65.9c-0.6-1.7-0.1-5.4,0.2-7.1c3.5-0.4,7.4-1.5,7-5.7c-5.5-0.9-13.6-0.4-11-8.8c5.2-3.6,15.1-1,21.5-0.9c8.5,0,11.6-2,18.7-5.4c10.7-5.1,27.3-8.5,33.6-19.5"/>
        			<path d="M36,49.9c0.1,3.7-1.4,7-1.2,10.5c3.3,0.2,6.7,0.2,9.9,0c0.3-2.9,1.7-6.5,1.4-8.8c0.5,5.5-3.5,10.2,3.9,9.7c4.9-0.4,5.4-4,4.8-9c0,3.1-0.1,6.3,0.1,9.4c3.4,0.2,7,0.2,10.4,0c0.3-5.2-0.6-10-0.3-15.2c12.4-2.2,23.2-18.2,14.9-30
        				c-2.8-4-5.9-6.1-10.7-7.5c-7.7-2.3-18.9-4.1-27.2-2.9c-5.1,0.7-12.8,4.6-15.6,9.2c-5,8.1-0.5,27.1,9.9,29.9c0.3,1.8,0.6,3.3,0.5,5.2"/>
        			<path fill="#000000" d="M47.8,23.9c-3.7,0-18.1,0.5-12.8,8.2c4.4,6.5,10.5-3.7,12.2-6.8"/>
        			<path fill="#000000" d="M55.8,25.3c1.9,1.1,7.4,15,13.2,9.2c6.5-6.6-9.6-8.5-11.8-9.8"/>
        			<path d="M49.8,36.6c-0.2,2.6-1.5,5.1-3.3,6.7"/>
        			<path d="M54.8,36.3c-0.9,2.7-1,6.3,0,8.7"/>
        		</g>
            </g>

            <animateTransform id="hideIt" begin="indefinite" attributeName="transform" type="translate" by="0, -75" dur="0.25s" repeatCount="1" />
            <animateTransform id="hideItByCroc" begin="indefinite" attributeName="transform" type="translate" by="0, 75" dur="0.25s" repeatCount="1" />
            <animateTransform id="hideItByGet" begin="indefinite" attributeName="transform" type="translate" by="50, -30" dur="0.4s" repeatCount="1" />
            <animate begin="hideItByGet.begin" attributeName="opacity" from="1" to="0.1" dur="0.4s" repeatCount="1" />
            <set attributeName="display" to="none" begin="hideIt.end; hideItByGet.end; hideItByCroc.end" />
            <set id="showIt" attributeName="display" to="block" begin="indefinite" />
        </g>

    	<g id="bigTurtle" stroke-width="0.26">
    		<path fill="#C78A16" stroke="#000000" stroke-width="2.0001" d="M119.764,63.396
    			c-3.24,0.432-16.2-2.304-17.064-12.456c-0.792-10.152,3.312-14.616-14.976-25.56c-18.288-10.872-53.928,0.936-65.88,5.976
    			C9.892,36.396-4.724,54.972,2.908,67.428c7.56,12.456,20.52,15.192,29.592,14.616c9-0.576,4.608-0.864,4.608-0.864
    			s-6.552,5.904-0.792,11.736c5.832,5.76,15.552,3.6,19.944,0c4.32-3.672,19.872-11.592,23.544-14.472
    			c3.6-2.952,5.04-1.152,5.04-1.152s-4.68-3.24,7.992,6.192c12.672,9.432,20.952,14.832,31.464,20.232
    			c10.512,5.472,16.632,5.472,30.384,10.872c13.68,5.472,32.184,8.352,49.536,9.072c17.352,0.72,47.088-5.76,47.088-5.76
    			l35.064-8.712l5.472-12.672c0,0-5.472-39.456-56.16-43.056C185.068,49.788,119.764,63.396,119.764,63.396z"/>
    		<path fill="#FFFFFF" stroke="#000000" stroke-width="2.0001" d="M23.284,47.124
    			c10.872,0,19.728-8.424,19.728-18.792c0-10.368-8.856-18.792-19.728-18.792S3.556,17.964,3.556,28.332
    			C3.556,38.7,12.412,47.124,23.284,47.124z"/>
    		<path stroke="#000000" d="M29.116,25.596c2.16,0,3.96-1.872,3.96-4.104
    			s-1.8-4.104-3.96-4.104c-2.232,0-4.032,1.872-4.032,4.104S26.884,25.596,29.116,25.596z"/>
    		<path fill="#FFFFFF" stroke="#000000" stroke-width="2.0001" d="M53.02,53.82
    			c10.728,0,19.512-8.712,19.512-19.368S63.748,15.083,53.02,15.083c-10.8,0-19.584,8.712-19.584,19.368S42.22,53.82,53.02,53.82z
    			"/>
    		<path stroke="#000000" d="M61.876,31.86c2.376,0,4.32-2.016,4.32-4.464
    			c0-2.52-1.944-4.536-4.32-4.536s-4.32,2.016-4.32,4.536C57.556,29.844,59.5,31.86,61.876,31.86z"/>
    		<path fill="#FFFFFF" d="M30.988,22.572c1.224,0,2.16-1.008,2.16-2.232c0-1.224-0.936-2.232-2.16-2.232
    			c-1.224,0-2.16,1.008-2.16,2.232C28.828,21.563,29.764,22.572,30.988,22.572z"/>
    		<path fill="#FFFFFF" d="M64.108,28.332c1.224,0,2.16-1.008,2.16-2.232s-0.936-2.232-2.16-2.232
    			c-1.224,0-2.16,1.008-2.16,2.232S62.884,28.332,64.108,28.332z"/>
    		<path d="M70.228,6.228c-0.288,0.504-2.88-0.792-1.584,1.8c1.296,2.592,5.112,6.336,6.408,6.552
    			c1.368,0.216,1.944-0.576,1.656-2.376C76.42,10.404,70.516,5.724,70.228,6.228z"/>
    		<path stroke="#000000" d="M17.812,0.107c-0.72-0.144-9,0.432-10.152,3.168
    			C6.58,6.012,9.1,5.22,9.82,4.788c0.72-0.432,2.592-0.72,3.456-0.648c0.864,0.072,3.24,0,4.392-0.36
    			c1.08-0.432,1.224-0.936,1.44-1.728C19.324,1.26,18.46,0.251,17.812,0.107z"/>
    		<path stroke="#000000" d="M11.692,72.828c0.792,0,1.44-0.576,1.44-1.296
    			c0-0.72-0.648-1.368-1.44-1.368s-1.44,0.648-1.44,1.368C10.252,72.251,10.9,72.828,11.692,72.828z"/>
    		<path d="M47.764,80.892l1.224-2.304c0,0,0.144-0.288,2.376-1.08c2.232-0.792,5.256-3.6,5.256-3.6l5.184-4.464
    			l0.792,0.072c0,0-2.808,4.896-3.528,6.336c-0.648,1.44-1.368,5.256-1.368,5.256l-5.472,0.216L47.764,80.892z"/>
    		<path d="M60.58,64.691c0,0.432-0.864,1.44,0.504,3.528c1.296,2.016,1.512,1.512,2.88,2.448
    			c1.368,0.936,2.736,1.008,2.376-0.072c-0.36-1.008-3.528-2.232-3.312-3.384c0.288-1.152,1.152-2.448-0.144-3.528
    			C61.372,62.532,60.58,64.26,60.58,64.691z"/>
    		<path fill="#FA9AA3" stroke="#000000" stroke-width="1.0001" d="M41.644,87.228
    			c0.36-0.504,4.32-4.968,5.472-5.904c1.08-0.936,2.232-1.44,3.528-0.648c1.224,0.792,1.8,0.576,1.8,0.576s1.584-1.08,2.376-1.08
    			s2.808,0.432,2.808,0.432l0.72,1.152l-4.68,5.616l-4.176,1.44c0,0-3.96,0.072-4.32,0c-0.432-0.072-3.456-0.72-3.456-0.72
    			L41.644,87.228z"/>
    		<path d="M52.876,80.315c-1.296,0.576-2.376,2.736-2.664,3.6c-0.216,0.864-0.072,0.936,0.504,0.648
    			c0.648-0.216,0.288-1.152,0.792-2.16c0.504-1.08,2.304-1.728,2.304-1.728S54.244,79.74,52.876,80.315z"/>
    		<path d="M37.252,87.948c0.216,0.864,4.392,0.288,5.832,0.864c1.44,0.648,3.96,0.792,5.256,0.792
    			c1.296,0,3.672-0.648,5.328-1.728c1.656-1.008,4.32-4.32,4.824-5.976c0.504-1.656,1.584-3.816,1.584-5.544
    			c0-1.728,0.72-2.736,1.512-4.824C62.38,69.516,62.74,69.3,62.74,69.3s-3.456,2.808-4.176,7.2
    			c-0.648,4.392-1.872,6.624-2.88,7.632c-1.08,1.008-4.68,4.464-6.984,4.392c-2.376-0.144-3.024-0.504-4.68-0.792
    			c-1.656-0.36-3.24-0.576-4.68-0.576C37.9,86.939,36.964,87.156,37.252,87.948z"/>
    		<path stroke="#000000" d="M35.884,81.324c-0.144,0.072,7.2-0.72,9.576-1.368
    			c2.376-0.72,5.688-2.376,5.688-2.376l9.144-6.912l1.296-1.584c0,0,1.512-0.576,0.864,0.36c-0.72,0.936-4.248,4.824-4.248,4.824
    			l-7.848,5.256c0,0-2.232,0.864-2.448,1.152c-0.288,0.288-4.968,1.656-9.144,1.512C36.316,81.972,35.956,81.18,35.884,81.324z"/>
    		<path stroke="#000000" d="M22.564,76.212c0.792,0,1.44-0.576,1.44-1.296
    			c0-0.72-0.648-1.296-1.44-1.296s-1.44,0.576-1.44,1.296C21.124,75.636,21.772,76.212,22.564,76.212z"/>
    		<path fill="#C78A16" d="M237.268,120.78c0.432,0.216-4.464,2.52-6.768,6.768
    			c-2.376,4.32-4.104,7.272-0.864,7.92c3.168,0.648,7.632,1.512,7.632,1.512s-1.656,1.656-0.216,4.032
    			c1.512,2.376,1.512,1.944,1.512,1.944s-1.944,0.792,0,3.384c1.944,2.52,16.848,5.544,20.88,5.544
    			c4.104,0,29.232-2.376,33.912-5.976c4.68-3.6,7.488-5.76,4.896-11.736c-2.52-5.976-14.472-11.52-14.472-15.984
    			c0-4.464-0.648-7.632,2.304-10.224c3.024-2.52-9.36-7.92-9.36-7.92l-21.96-0.144c0,0-15.768,3.168-15.768,5.328
    			C238.996,107.315,236.836,120.563,237.268,120.78z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M155.404,42.731
    			c0.72,0.216,11.52-14.328,23.904-17.28c12.456-2.952,24.048-0.504,25.848,2.376c1.8,2.88-1.584,12.672-4.104,14.544
    			c-2.592,1.872-1.872,0.72-6.408,3.744s-6.048,4.536-6.048,4.536s-0.36-7.92-9.792-6.768c-9.36,1.08-17.28,1.872-17.28,1.872
    			S154.612,42.588,155.404,42.731z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M205.228,28.908
    			c1.656-2.16,2.16-5.328,12.528-4.824c10.44,0.576,9.504,2.52,10.08,7.056c0.576,4.536-3.456,13.824-3.456,13.824
    			s0.936,1.368-3.6,3.24c-4.464,1.872-7.704,5.832-7.704,5.832s-4.536-7.704-8.496-8.064c-3.888-0.432-3.744-3.24-3.744-3.24
    			C202.636,39.204,203.572,31.067,205.228,28.908z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M227.98,32.508
    			c-0.864-6.48,4.248-5.976,9.144-6.12c4.968-0.144,7.416,1.944,9.864,6.192c2.376,4.248,3.96,11.304,3.96,11.304
    			s0.936,3.528-3.6,5.832c-4.536,2.232-6.192,3.6-6.192,3.6s-4.392-6.624-9.432-6.264c-5.112,0.36-7.128-1.872-7.128-1.872
    			C224.308,45.54,228.772,39.06,227.98,32.508z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M246.268,29.268
    			c0.36-1.44,9.144-2.304,14.256,1.08c5.04,3.384,14.112,14.256,14.112,14.256l0.576,2.664c0,0-6.264,2.088-8.496,4.536
    			c-2.232,2.448-3.744,2.952-3.96,2.016c-0.144-0.936-9-5.256-11.448-5.976c-2.448-0.792,0.648-5.472-1.656-9.432
    			C248.356,33.083,245.908,30.708,246.268,29.268z"/>
    		<path stroke="#000000" d="M83.476,32.004c1.224,0,2.232-0.792,2.232-1.8
    			c0-0.936-1.008-1.8-2.232-1.8s-2.232,0.864-2.232,1.8C81.244,31.212,82.252,32.004,83.476,32.004z"/>
    		<path stroke="#000000" d="M90.028,32.58c0.936,0,1.728-0.792,1.728-1.728
    			s-0.792-1.656-1.728-1.656c-0.936,0-1.656,0.72-1.656,1.656S89.092,32.58,90.028,32.58z"/>
    		<path stroke="#000000" d="M89.596,36.18c0.576,0,1.008-0.36,1.008-0.792
    			s-0.432-0.72-1.008-0.72c-0.576,0-1.008,0.288-1.008,0.72S89.02,36.18,89.596,36.18z"/>
    		<path stroke="#000000" d="M93.412,44.82c1.152,0,2.088-0.576,2.088-1.296
    			c0-0.792-0.936-1.368-2.088-1.368c-1.08,0-2.016,0.576-2.016,1.368C91.396,44.244,92.332,44.82,93.412,44.82z"/>
    		<path stroke="#000000" d="M97.876,43.523c0.864,0,1.584-1.008,1.584-2.16
    			c0-1.224-0.72-2.232-1.584-2.232c-0.864,0-1.584,1.008-1.584,2.232C96.292,42.516,97.012,43.523,97.876,43.523z"/>
    		<path stroke="#000000" d="M78.004,25.452c-0.72-0.216-4.32,0.72-3.168,2.016
    			c1.08,1.368,0.576,0.936,2.448,0.432C79.156,27.324,78.796,25.596,78.004,25.452z"/>
    		<path stroke="#000000" d="M86.5,32.004c0,0-4.536-0.72-2.808,1.296
    			c1.656,2.088,2.952,0.432,2.952,0.432L86.5,32.004z"/>
    		<path stroke="#000000" d="M97.66,48.204c-1.656,0.216-2.88,0.504-3.096,2.88
    			c-0.144,2.448-0.576,3.384,1.44,2.448c2.088-1.008,2.88-2.088,2.448-3.24C97.948,49.212,99.244,48.06,97.66,48.204z"/>
    		<path stroke="#000000" d="M97.948,58.932c-1.296,1.44-0.792,3.384,0.648,3.24
    			c1.44-0.216,3.672,0.144,3.384-1.44C101.62,59.076,99.244,57.492,97.948,58.932z"/>
    		<path stroke="#000000" d="M94.78,56.556c-0.792-0.648-2.088-0.504-1.584,1.44
    			c0.432,1.872,0.432,1.44,1.728,0.648C96.22,57.852,95.572,57.204,94.78,56.556z"/>
    		<path stroke="#000000" d="M89.092,41.004c0.648,0,1.224-0.432,1.224-0.937
    			c0-0.504-0.576-0.936-1.224-0.936c-0.648,0-1.224,0.432-1.224,0.936C87.868,40.572,88.444,41.004,89.092,41.004z"/>
    		<path stroke="#000000" d="M94.348,39.563c0.936,0,1.656-0.576,1.656-1.296
    			c0-0.792-0.72-1.368-1.656-1.368s-1.656,0.576-1.656,1.368C92.692,38.988,93.412,39.563,94.348,39.563z"/>
    		<path stroke="#000000" d="M93.916,34.812c0.432,0,0.864-0.288,0.864-0.648
    			s-0.432-0.648-0.864-0.648c-0.504,0-0.936,0.288-0.936,0.648S93.412,34.812,93.916,34.812z"/>
    		<path stroke="#000000" d="M105.148,64.548c0.864,0,1.584-0.648,1.584-1.44
    			s-0.72-1.44-1.584-1.44c-0.864,0-1.584,0.648-1.584,1.44S104.284,64.548,105.148,64.548z"/>
    		<path stroke="#000000" d="M167.284,113.796c1.512,0,2.736-1.008,2.736-2.16
    			c0-1.224-1.224-2.16-2.736-2.16c-1.512,0-2.736,0.936-2.736,2.16C164.548,112.788,165.772,113.796,167.284,113.796z"/>
    		<path stroke="#000000" d="M175.132,113.147c0.792,0,1.44-0.576,1.44-1.224
    			s-0.648-1.152-1.44-1.152s-1.44,0.504-1.44,1.152S174.34,113.147,175.132,113.147z"/>
    		<path stroke="#000000" d="M173.908,117.756c1.152,0,2.16-0.504,2.16-1.152
    			c0-0.72-1.008-1.224-2.16-1.224c-1.224,0-2.16,0.504-2.16,1.224C171.748,117.251,172.684,117.756,173.908,117.756z"/>
    		<path stroke="#000000" d="M179.74,114.588c0.504,0,0.936-0.432,0.936-0.864
    			c0-0.504-0.432-0.936-0.936-0.936c-0.504,0-0.936,0.432-0.936,0.936C178.804,114.156,179.236,114.588,179.74,114.588z"/>
    		<path stroke="#000000" d="M190.036,115.523c1.224,0,2.16-0.648,2.16-1.512
    			c0-0.864-0.936-1.512-2.16-1.512c-1.152,0-2.16,0.648-2.16,1.512C187.876,114.875,188.884,115.523,190.036,115.523z"/>
    		<path stroke="#000000" d="M189.964,120.78c1.224,0,2.232-0.792,2.232-1.728
    			s-1.008-1.728-2.232-1.728c-1.224,0-2.232,0.792-2.232,1.728S188.74,120.78,189.964,120.78z"/>
    		<path stroke="#000000" d="M181.972,118.908c1.584,0,2.88-0.792,2.88-1.728
    			c0-0.864-1.296-1.656-2.88-1.656s-2.88,0.792-2.88,1.656C179.092,118.116,180.388,118.908,181.972,118.908z"/>
    		<path stroke="#000000" d="M196.876,119.556c1.224,0,2.232-0.864,2.232-1.944
    			c0-1.08-1.008-1.944-2.232-1.944c-1.296,0-2.232,0.864-2.232,1.944C194.644,118.691,195.58,119.556,196.876,119.556z"/>
    		<path stroke="#000000" d="M200.764,114.083c0.648,0,1.224-0.504,1.224-1.08
    			c0-0.648-0.576-1.152-1.224-1.152s-1.224,0.504-1.224,1.152C199.54,113.58,200.116,114.083,200.764,114.083z"/>
    		<path stroke="#000000" d="M203.14,119.7c0.936,0,1.728-0.792,1.728-1.656
    			c0-0.936-0.792-1.728-1.728-1.728s-1.656,0.792-1.656,1.728C201.484,118.908,202.204,119.7,203.14,119.7z"/>
    		<path stroke="#000000" d="M208.828,117.324c0.72,0,1.296-0.576,1.296-1.296
    			c0-0.72-0.576-1.296-1.296-1.296c-0.72,0-1.296,0.576-1.296,1.296C207.532,116.748,208.108,117.324,208.828,117.324z"/>
    		<path stroke="#000000" d="M215.308,115.523c1.08,0,2.016-0.792,2.016-1.728
    			c0-1.008-0.936-1.8-2.016-1.8s-2.016,0.792-2.016,1.8C213.292,114.731,214.228,115.523,215.308,115.523z"/>
    		<path stroke="#000000" d="M213.508,119.7c1.296,0,2.376-0.792,2.376-1.656
    			c0-0.936-1.08-1.728-2.376-1.728c-1.368,0-2.448,0.792-2.448,1.728C211.06,118.908,212.14,119.7,213.508,119.7z"/>
    		<path stroke="#000000" d="M208.036,122.076c0.864,0,1.584-0.648,1.584-1.44
    			s-0.72-1.44-1.584-1.44c-0.864,0-1.584,0.648-1.584,1.44S207.172,122.076,208.036,122.076z"/>
    		<path stroke="#000000" d="M221.572,116.964c1.008,0,1.8-0.72,1.8-1.584
    			c0-0.864-0.792-1.584-1.8-1.584c-1.008,0-1.872,0.72-1.872,1.584C219.7,116.244,220.564,116.964,221.572,116.964z"/>
    		<path stroke="#000000" d="M221.716,121.644c0.936,0,1.656-0.504,1.656-1.08
    			c0-0.576-0.72-1.008-1.656-1.008s-1.656,0.432-1.656,1.008C220.06,121.14,220.78,121.644,221.716,121.644z"/>
    		<path stroke="#000000" d="M227.476,117.899c1.08,0,2.016-0.864,2.016-1.944
    			c0-1.152-0.936-2.016-2.016-2.016s-2.016,0.864-2.016,2.016C225.46,117.036,226.396,117.899,227.476,117.899z"/>
    		<path stroke="#000000" d="M234.316,118.404c1.224,0,2.16-0.864,2.16-1.944
    			c0-1.008-0.936-1.872-2.16-1.872c-1.152,0-2.16,0.864-2.16,1.872C232.156,117.54,233.164,118.404,234.316,118.404z"/>
    		<path stroke="#000000" d="M242.02,116.315c1.08,0,2.016-0.432,2.016-0.936
    			c0-0.504-0.936-0.936-2.016-0.936s-2.016,0.432-2.016,0.936C240.004,115.884,240.94,116.315,242.02,116.315z"/>
    		<path stroke="#000000" d="M247.78,115.38c1.008,0,1.8-0.864,1.8-1.944
    			c0-1.008-0.792-1.872-1.8-1.872c-1.008,0-1.872,0.864-1.872,1.872C245.908,114.516,246.772,115.38,247.78,115.38z"/>
    		<path stroke="#000000" d="M256.924,116.82c1.08,0,1.944-0.792,1.944-1.656
    			c0-0.936-0.864-1.728-1.944-1.728c-1.008,0-1.872,0.792-1.872,1.728C255.052,116.028,255.916,116.82,256.924,116.82z"/>
    		<path stroke="#000000" d="M259.372,120.78c0.792,0,1.44-0.432,1.44-1.008
    			c0-0.576-0.648-1.008-1.44-1.008s-1.44,0.432-1.44,1.008C257.932,120.348,258.58,120.78,259.372,120.78z"/>
    		<path stroke="#000000" d="M261.244,114.875c0.576,0,1.008-0.576,1.008-1.368
    			c0-0.72-0.432-1.296-1.008-1.296c-0.504,0-0.936,0.576-0.936,1.296C260.308,114.3,260.74,114.875,261.244,114.875z"/>
    		<path stroke="#000000" d="M235.18,120.924c-2.88,3.6-9.504,7.488-8.064,12.312
    			c1.44,4.752,2.88,3.96,5.76,4.608s3.312,0,3.312,0s-1.296,3.024-0.144,4.464s1.152,1.8,1.152,1.8s-1.656,4.752,6.984,7.2
    			c8.64,2.376,29.736,0.432,34.056,0c4.32-0.504,18.864-3.024,20.808-8.28c1.872-5.256,2.376-5.04-1.656-10.656
    			c-4.032-5.616-10.656-8.784-11.808-11.16c-1.224-2.376-1.944-3.888-1.008-6.12c0.936-2.232,1.008-5.256,1.008-5.256
    			s-3.168-1.656-3.672,0.576c-0.432,2.232-2.232,4.248-1.584,6.984c0.648,2.736,3.384,7.992,7.056,10.728
    			c3.672,2.664,9.576,6.552,9.576,9.36c0,2.88-2.592,4.176-6.408,6.12c-3.816,1.944-11.016,4.608-21.096,5.904
    			s-18.36,1.44-21.888-1.296c-3.528-2.664-6.264-2.521-6.408-5.112c-0.144-2.52,1.44-3.816,4.032-5.76
    			c2.52-1.872,7.2-4.896,9.072-5.112c1.944-0.144,1.8-1.872-1.08-1.224c-2.88,0.576-11.52,5.904-12.672,7.344
    			c-1.08,1.44-2.52,2.52-2.52,2.52s-0.504-2.52,1.728-4.968c2.232-2.376,5.904-7.128,9.288-8.568
    			c3.384-1.44,4.176-2.592,4.176-2.592s4.104,5.4,6.048,5.4s2.592-0.288,1.152-2.016c-1.44-1.8-4.68-3.528-6.408-7.992
    			c-1.8-4.536-3.672-6.984-3.168-9.072s-3.96-3.744-3.456-0.432c0.504,3.384,0.648,5.976,2.592,8.352
    			c1.872,2.448,1.8,3.024,1.8,3.024s-1.152,2.232-4.68,4.032c-3.528,1.728-10.08,9.432-10.08,9.432s-0.144,1.584-2.52,0.936
    			s-4.824-0.648-4.68-3.672c0.216-3.024,0.432-5.256,3.888-7.848c3.456-2.52,4.176-3.024,4.32-3.816
    			C239.212,120.132,238.06,117.324,235.18,120.924z"/>
    		<path stroke="#000000" d="M101.332,54.612c0,0-4.536-0.72-2.808,1.368
    			c1.656,2.016,3.024,0.36,3.024,0.36L101.332,54.612z"/>
    		<path stroke="#000000" d="M100.036,47.628c0.504,0,0.864-0.288,0.864-0.648
    			c0-0.36-0.36-0.648-0.864-0.648s-0.864,0.288-0.864,0.648C99.172,47.34,99.532,47.628,100.036,47.628z"/>
    		<path fill="#C78A16" stroke="#000000" stroke-width="2.0001" d="M290.62,109.979c0,0-2.808,1.8-0.288,4.608
    			c2.52,2.808,6.696,5.832,10.728,5.832s7.92-1.08,10.728-2.52c2.808-1.512,8.064-6.264,8.064-9.432c0-3.096-1.512-1.008-5.112,0
    			c-3.528,1.08-7.128,1.08-7.56,0c-0.432-1.008-2.808-0.144-6.12,1.08C297.748,110.7,290.62,109.979,290.62,109.979z"/>
    		<path fill="#C78A16" d="M132.292,106.092c0,0-3.816,2.232-2.448,8.064c1.368,5.904,0.144,6.264,0.144,5.976
    			c0-0.216-17.496,8.928-17.64,14.472c-0.072,5.616-0.288,7.776-0.288,7.776l1.728,0.576c0,0-1.512,2.016,1.008,2.88
    			c2.448,0.864,16.272,6.552,32.112,5.616c15.84-1.008,19.584-6.336,19.368-8.856c-0.288-2.448-3.528-6.696-2.736-7.2
    			c0.72-0.504,8.064-2.736,9.144-4.68c1.152-2.016-0.144-2.808-1.944-5.76c-1.872-3.024-2.304-5.616-1.728-7.344
    			c0.648-1.728-3.024-1.224-3.024-1.224l-12.96-5.184L132.292,106.092z"/>
    		<path stroke="#000000" d="M138.412,107.388c0.864,0,1.584-0.936,1.584-2.088
    			c0-1.152-0.72-2.088-1.584-2.088c-0.864,0-1.584,0.936-1.584,2.088C136.828,106.452,137.548,107.388,138.412,107.388z"/>
    		<path stroke="#000000" d="M136.828,116.172c1.008,0,1.872-0.576,1.872-1.368
    			c0-0.72-0.864-1.368-1.872-1.368c-1.08,0-1.944,0.648-1.944,1.368C134.884,115.596,135.748,116.172,136.828,116.172z"/>
    		<path stroke="#000000" d="M137.692,111.204c0.864,0,1.512-0.576,1.512-1.296
    			c0-0.648-0.648-1.224-1.512-1.224c-0.864,0-1.512,0.576-1.512,1.224C136.18,110.627,136.828,111.204,137.692,111.204z"/>
    		<path stroke="#000000" d="M133.876,112.5c0.792,0,1.512-0.648,1.512-1.44
    			s-0.72-1.44-1.512-1.44c-0.864,0-1.512,0.648-1.512,1.44S133.012,112.5,133.876,112.5z"/>
    		<path stroke="#000000" d="M138.916,101.412c-0.144-0.288-6.552-1.08-8.352,4.68
    			c-1.728,5.76-3.024,8.928-1.584,12.744c1.44,3.888-2.52-5.112-13.104,9.288c-10.512,14.4-4.824,13.104-3.384,15.192
    			c1.44,2.088,0.864,0.288,0.864,0.288s-1.944,1.152,0.144,2.592s14.832,5.76,20.592,6.048c5.76,0.36,22.248-0.144,28.368-4.104
    			c6.264-4.032,6.12-6.12,4.176-8.64c-1.872-2.592-1.872-3.384-1.872-3.384s1.08-0.288,3.672-1.44
    			c2.52-1.08,4.752-1.728,4.752-4.824c0-3.024-3.024-5.688-3.312-7.632c-0.36-1.944,1.08-4.32-0.864-4.32
    			c-1.872,0-2.376,1.944-1.224,3.816c1.08,1.944,3.96,5.76,3.024,7.2s-4.824,6.264-7.704,4.824s-4.824-5.328-5.472-9.576
    			c-0.648-4.32-2.88-5.976-1.656-8.496c1.296-2.592,6.192-7.848,6.192-8.784c0-1.008-3.6-0.648-5.976,2.88
    			c-2.448,3.528-3.384,6.84-2.736,9.72c0.648,2.88,3.024,11.016,5.112,13.608c2.016,2.52,5.184,6.408,4.392,9.072
    			c-0.792,2.736-5.688,5.328-8.712,5.976c-3.024,0.576-11.016,3.312-23.472,0.936c-12.528-2.376-13.104-4.032-14.112-5.112
    			c-0.936-1.152-2.088-1.152-3.672-2.376c-1.584-1.296-0.792-3.744,0.36-5.616c1.08-1.944,4.464-6.696,7.344-9.792
    			c2.88-3.024,8.424-5.4,11.016-4.896c2.52,0.432-0.36-1.296-0.504-3.096c-0.144-1.728,0.504-6.336,1.008-8.424
    			c0.432-2.088,0.576-5.616,2.52-5.76C136.684,103.86,139.06,101.771,138.916,101.412z"/>
    		<path stroke="#000000" d="M130.996,128.124c-0.648-1.512-7.704,1.728-11.952,6.84
    			c-4.248,5.112-4.896,7.416-4.896,7.416s-2.376,1.296,0.216,2.16c2.592,0.864,1.728,1.08,2.736-2.16
    			c1.08-3.168,4.104-6.84,6.84-8.928c2.808-2.16,7.056-3.456,5.544-3.24C129.484,130.212,131.644,129.636,130.996,128.124z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M273.34,69.444
    			c-0.936-0.36-4.032-14.616-7.416-16.128c-3.384-1.44,8.352-7.2,12.672-6.264c4.32,0.936,11.376,8.28,14.112,10.728
    			c2.736,2.52,7.128,10.44,3.96,11.52c-3.168,1.008-0.936,0.36-5.256,1.08c-4.392,0.792-4.752,3.96-6.048,3.384
    			C284.068,73.26,274.276,69.875,273.34,69.444z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M243.604,66.996
    			c0-0.144-1.152-11.808-2.304-12.96c-1.08-1.152,5.688-6.048,12.456-5.256c6.768,0.72,11.952,4.176,14.832,8.352
    			c2.88,4.104,3.384,10.44,3.384,10.44s1.728,3.96-3.168,4.32c-4.896,0.432-7.92,5.688-8.496,6.048
    			c-0.576,0.36-0.36-3.96-4.896-6.624C250.948,68.724,243.604,67.212,243.604,66.996z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M213.076,53.459c0,0,5.256-8.568,15.912-8.064
    			c10.656,0.576,13.464,7.2,14.4,10.44c0.936,3.168,1.512,10.224,1.512,10.224s-4.68,3.24-8.136,5.472
    			c-3.384,2.232-5.04,5.688-5.04,5.688s-3.6-7.56-6.984-8.856c-3.384-1.368-10.728-1.152-10.728-1.152L213.076,53.459z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M187.948,50.58
    			c0.792-2.304,3.168-9.864,14.544-7.272c11.304,2.592,10.512,6.696,11.52,12.312c1.008,5.688,0.72,8.64,0.504,8.856l-2.16,3.096
    			c0,0-6.768,2.664-7.92,4.752c-1.152,2.016-2.664-5.688-7.704-5.832c-5.112-0.216-13.392,0.504-11.52-1.152
    			C187.084,63.612,187.084,52.812,187.948,50.58z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M144.1,63.251
    			c0,0,12.672-19.872,24.336-21.744c11.736-1.872,18.72,2.16,19.656,6.696c0.936,4.464,1.584,10.368,0.648,13.608
    			c-0.936,3.24-1.224,2.736-2.376,3.528c-1.152,0.72-9.576,5.832-9.576,5.832s-0.216-7.92-6.408-7.704
    			c-6.264,0.144-14.04,4.896-14.04,4.896s-3.024-4.752-6.048-4.536S144.1,63.251,144.1,63.251z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M121.492,63.036
    			c0.216-0.504,18.072-21.456,28.44-21.672c10.224-0.144,9.36,3.24,9.36,3.24s-1.872,2.448-4.68,5.472
    			c-2.808,3.024-8.28,11.88-8.28,11.88l-1.152,2.448c0,0-9.936,0.936-10.152,3.168c-0.144,2.304,0-3.96-5.04-3.528
    			C124.876,64.404,121.276,63.612,121.492,63.036z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M100.036,80.028
    			c-1.512,0,17.208-22.32,27.72-19.08c10.512,3.24,6.984,5.544,6.552,8.712c-0.504,3.096-4.176,10.944-5.832,11.448
    			C126.748,81.684,101.548,80.028,100.036,80.028z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M135.028,67.788
    			c-0.36-1.512,6.984-8.424,13.536-6.696c6.552,1.8,8.496,3.312,7.56,7.992c-0.936,4.68-3.744,12.024-3.744,12.024
    			s-7.56,2.088-13.752,1.512s-9.792-2.016-9.792-2.016S135.388,69.3,135.028,67.788z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M157.78,67.212c0,0,4.608-5.688,12.168-4.176
    			c7.56,1.584,10.224,2.664,9.432,6.984c-0.72,4.32,0.36,8.856-2.592,12.456c-3.024,3.528-3.816,3.96-7.2,2.592
    			c-3.384-1.296-16.848-3.168-16.848-3.168s0.72-3.96,2.448-7.704C156.556,70.884,157.78,67.212,157.78,67.212z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M179.74,69.875
    			c0.792-1.152,7.92-7.056,15.264-5.472c7.344,1.512,10.008,4.68,10.368,9.36c0.36,4.752,0.576,16.416-3.96,16.416
    			s-8.28-1.512-11.304-1.872s-16.2-1.512-15.408-3.24C175.42,83.412,179.74,69.875,179.74,69.875z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M204.796,71.748
    			c-0.36-0.792,8.496-9.432,15.84-6.264c7.344,3.24,8.424,5.328,9.792,8.496c1.296,3.24,1.08,8.496,1.08,9.792
    			c0,1.296,0.936,9,0,9s-14.832,1.008-19.944,0.216c-5.04-0.72-9.432-0.576-9.432-2.808S205.156,72.468,204.796,71.748z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M231.148,75.492c0,0,3.096-9.36,13.608-8.28
    			c10.44,1.08,11.376,3.024,13.68,6.768c2.304,3.744,4.536,15.048,4.536,15.048s4.536,3.744-2.304,4.176
    			c-6.768,0.36-28.944,1.656-28.944,0.36c0-1.296-0.576-9.072-0.576-9.072V75.492z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M260.308,75.492
    			c0.576-2.448,2.592-7.632,12.456-6.912c9.936,0.72,10.944,2.88,13.536,6.264c2.664,3.456,3.6,13.248,3.6,13.248
    			s2.952,3.024-0.576,3.024c-3.6,0-15.984,0.936-18.288,0.936c-2.232,0-9.216,0.936-9.216,0.936s-0.72-6.048-1.152-9
    			C260.308,80.964,259.732,77.939,260.308,75.492z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M287.452,73.835
    			c-0.36-2.88,1.872-8.928,10.8-6.552c8.928,2.376,9.36,9.504,10.44,12.456c1.152,3.024,4.176,12.312-1.152,12.096
    			c-5.256-0.144-18.072-0.936-18.072-0.936s1.224-6.048-0.432-9.432C287.308,78.083,287.74,76.716,287.452,73.835z"/>
    		<path fill="#799025" stroke="#000000" stroke-width="2.0001" d="M102.844,80.388c0,0-5.4-2.304-8.064,0.504
    			c-2.664,2.88-8.496,8.928-7.776,12.816c0.72,3.888,2.304,8.352,9.432,9.072c7.056,0.72,18.072-3.744,22.752-3.744
    			c4.608,0,21.816-3.888,30.168-1.44c8.352,2.52,32.616,2.52,43.992,7.848c11.376,5.328,37.512,1.944,40.752,1.8
    			c3.168-0.216,37.152-3.024,44.784,0.504c7.632,3.528,15.264,3.528,21.168,2.448c5.832-1.008,14.544-9.936,13.68-14.04
    			c-0.936-4.032-2.664-6.696-22.392-5.112s-54.432,2.664-62.424,2.304s-29.664-2.664-39.096-4.464
    			c-9.432-1.728-35.64-7.776-48.456-7.416C128.548,81.828,102.844,80.388,102.844,80.388z"/>
    	</g>

    	<g id="go" stroke="green" stroke-width="12" fill="none" transform="scale(0.4)">
    		<path d="M48.3,26.7C52.3,10.6,40.8,8,27,7.3C9.8,6.5,5,19.2,5,34.5C5,46.2,9.3,56,19.7,62c8.3,4.8,25.3,4.6,28.7-6.7c6.8-22.3-29.8-21.4-30-14"/>
    		<path d="M80.7,7.7c-9.2-1-19.9,12.3-22.5,20c-3.8,11.2-2.1,23.8,7,31.5c8.3,7.1,20.9,6,28.9-2c7.7-7.8,6.4-19,6-29.5c-0.4-11.5-9.3-22.1-21.3-22"/>
    		<path d="M107.3,5c4.5,5.9,4.3,16.5,4.7,24c0.2,4.8-3.1,23.8,5.2,21.2c2-4.6,3.1-9.4,4.9-13.9c2.2-5.4,6-9.8,7.2-15.4c3.1-15.4-7.6-16-20.7-16"/>
    		<path d="M112.7,59c-5-0.1-5.8,5.2-5.2,9.2c6.2,3.1,11.4,1.1,10.5-6.5c-2.2-0.8-4.7-1.1-6.6-0.1"/>
  		    <animate attributeName="stroke" values="green;gold;red;gold;green" dur="2s" repeatCount="indefinite" begin="0s" />
    	</g>

</defs>

<!-- ************************** MAIN ELEMENTS ***************************** -->
<g transform="scale(0.9) translate(100 100)" id="envelope" stroke="#000000" stroke-miterlimit="4">
    <g transform="translate(0,95)">
        <rect x="-10" y="0" width="100" height="100" fill="green" stroke="black" />
        <rect x="90" y="9.5" width="610" height="90" fill="#0000FF" stroke="none" transform="rotate(180),translate(-790,-110)">
            <animate attributeName="height" values="82;90;82" repeatCount="indefinite" dur="5s" begin="0s" />
        </rect>
        <rect x="700" y="0" width="100" height="100" fill="green" stroke="black" />
        <g transform="translate(-18 -8) scale(1.3)">
		    <path fill="#FFEE5F" d="M12.3,3.2c11.5,0,23.3,0.4,34.7-0.3C50.2,2.6,53,0.7,56,0.5c2.8-0.2,5.4,1.6,8.1,2.4C74,6,86.7,1.8,88,15.8c0.3,3.2,1.4,14.4-5.5,10.8c-4.8-2.5-4.5-9.2-11.7-4.8c-3,1.8-4.4,2.9-8.2,1c-2.9-1.4-4-2.8-7.5-3.2c-1.5-0.1-2.9-0.2-4.2,0.3
			c-0.9,0.3-1.8,1.5-2.8,1.6c-2.7,0.3-4-2.3-6.6-3.3c-3.6-1.3-8.4-1.2-11.9,0.1c-3,1.1-3.6,2.4-7.1,1.2c-2.7-0.9-4.3-2-7.3-2c-3.5,0-4.3,1.3-7,2.3c-2.4,0.9-5.4-0.3-6.9-2.4c-2-2.7-0.6-4,0.6-6.6c1-2.3,0.8-4.5,3.1-5.9C6.9,3.8,9.9,4.1,12,3.5"/>
	    </g>
        <g transform="translate(685 -7) scale(1.3)">
		    <path fill="#FFEE5F" d="M95.5,4.6c-3.5-2.1-10.9-3.7-15-4C73.3,0.2,66.3,1,59.5,2c-5.5,0.8-11.3,0.6-17,0.6c-7,0-12.7-2-19.6-2C16.2,0.6,9,1.5,4.3,6.9c-4.1,4.7-4.6,11.9-2.7,17.6c1.3,0.5,2.8,0.5,4.2,0.3c1.6-2.5,1.8-3,4.7-3.6c3.1-0.6,4.3-1.6,6.9-2.7
			c2.9-1.3,4.5-0.7,6.1,1.7c1.8,2.9,1.1,3.6,4.8,2.4c2.3-0.7,3.7-2.2,5.8-3.2c2.6-1.2,4.7-0.6,7.7-0.6c3,0,5.5-0.3,8,1.3c2.8,1.9,2.8,3.1,6.3,3.3c2.8,0.2,4.9-0.3,7.3-1.7c2.8-1.8,2.3-2.9,5.1-0.6c1.4,1.1,0.9,2.6,3.2,2.4c1.3-0.2,1.6-1.6,2.7-2.3
			c2-1.2,5.5-1.6,7.9-1.7c4.8-0.2,12.8,0.6,16.1-3.6c1.2-1.6,2.4-4.9,1.6-7.1c-0.6-1.6-3.1-2.8-4.7-3.7"/>
	    </g>
        <g transform="scale(0.3) translate(2400 -285)">
    		<path fill="green" stroke-width="2" d="M162.6,299.1c-28-0.1-47.3-15-47.3-43.5c0-14.3,0.5-26.4,8-38.8c5.6-9.2,14.2-15.2,20.7-23.5c-1.4,7.6-7,14.6-8.5,22.4c-1.5,7.6-1.1,16.3-0.8,24.1c0.3,7,3.2,13.5,3.3,20.4c3.6-18.7,4.4-36,14.5-51.7c0.6,6.4-0.7,12.8-0.5,19.3
    			c0.2,7.1,2.5,13.6,3.3,20.5c9.5-20.4,2.9-48.6,23.3-63.6c-1.2,10.9-5.6,22.7-8.1,33.7c-2.5,11-2.5,21.7-2.5,32.9c-0.8-10.5,10.5-31.5,18.2-39.4c1.6,5.8-0.8,12.8-1.5,18.9c-0.7,6-0.7,12-0.7,18.1c0-7.2,12.4-15.9,17.9-18.9c0.4,8.5,0.1,17.2,0.1,25.7
    			c1.4-5.4,13.7-15.8,19.2-17.7c0.6,7.6-0.7,15.5-0.5,23.2c8.6,0.8,21.1-0.5,29.3-3c0.1,3.6-1.2,9.9-2.9,12.9c-0.9,1.7-2,3.9-3.8,4.9c-2.7,1.6-11.4-0.1-14.5,0c-7.5,0-15.3,0.5-22.7-0.7c8.7-0.3,17.7,3.4,26.4,4.2c-3.5,10.1-25.2,10.4-34,11.2
    			c-12.5,1.2-23.9,5.9-35.3,7.3"/>
	    </g>
        <g transform="scale(0.3) translate(-20 -120)">
    		<path fill="green" stroke-width="2" d="M84,32.5C80.2,44,72.4,55.9,67.3,67.5C62.5,78.5,57.1,89,52.1,99.6c1.1-11.4,4.5-21,4.5-33.1c0-13.9-4.7-18.7-12.2-29.9c-2.9,6-2.6,13.6-5.9,20.1c-3.9,7.5-8.3,15-9.9,23.2c-2.5,12.9,4.5,26.3,15.1,32.7C32.4,113,29.2,92.9,19.4,93.9
    			c-0.8,6.4,2.2,12.7,3.8,18.5c-8.1,0.5-12.4-7.9-16.7-13.1c-2.4,9.5-1.1,22.7,5.2,30.6c-3.9-0.1-7.9-0.2-11.7,0.1c4.7,7.7,11,9.3,19.4,10.5c-0.6,0.2-6.2,1.7-6.9,2c11.1,3.1,25.1,3.3,36.7,3.4c6.1,0.1,11.9,0.7,18,0.7c8.6,0,16.4,0.3,22.7-6.5
    			c4.9-5.3,6.1-15,3.3-21.5c-3.4-8.1-10.9-8.1-17.5-12c3.6-4.9,10.1-7.5,13.9-12.6c-5.3-0.1-13.4,4.9-17.9,7.7c1.6-3.7,3.6-7.8,5.3-11.5c-7.2,4.3-13.1,10-19.3,15.5C65,95.4,70.4,84.2,75.1,73.1c4.8-11.3,14.2-24.7,15.4-36.6c-1.8-0.9-3.8-1.5-5.9-1.4"/>
    		<path fill="red" d="M95.2,22.5c-0.8-8,7.4-16,11.2-22.5c0.4,6.7-1,13.3-1.4,19.8c6.2-2.8,14.5-4.7,21.5-7c-5.8,3.7-14.1,7.4-18,13c4.5,2.8,9.8,5.9,13.8,8.8c-5.1,0.4-10.5,0.5-15.4-0.7c4.9,5.3,8.9,11.9,12.5,17.7c-6.3-4.8-12.7-10-18.9-15.5
    			c-2.7,6.7-2,14.8-4.2,21.6c-1.4-7.3-4.2-14.2-5.8-21.4c-5.9,2.3-12.1,8-16.8,12.7c3.6-4.1,7.2-7.9,10.9-11.3c-8.3-0.6-16.7-0.2-25-0.2c7.7,0.2,14.4-3.8,21.5-5.4c-3.2-5.5-14.6-11.4-20.4-15.7c8.7-1.2,15.1,4.7,23,6.1c1.1-5.6-1-13.8-3.2-18.2
    			c3.3,5.1,6.9,10.6,11.3,15.3c0.2-5.6,2.1-11.7,4.3-16.9c1.5,4.4,1,9.3,1.8,13.7"/>
        </g>

        <use xlink:href="#go" x="0" y="-70" display="none">
            <set id="serveInLeft" attributeName="display" to="block" begin="indefinite" />
            <set id="serveOutLeft" attributeName="display" to="none" begin="indefinite" />
        </use>

        <use xlink:href="#go" x="740" y="-70" display="none">
            <set id="serveInRight" attributeName="display" to="block" begin="indefinite" />
            <set id="serveOutRight" attributeName="display" to="none" begin="indefinite" />
        </use>
    </g>


    <!-- important layer where dynamically are inserted many other nodes... -->
    <g transform="translate(100,100)" id="pool" />

    <g stroke="none" font-weight="bold" text-rendering="optimizeLegibility" fill="#BB0000" font-size="14px">
        <text x="550" y="20">Level: </text>
        <text id="level" x="600" y="20"> </text>

        <text x="624" y="20" fill="black">Lives: </text>
        <text id="lives" x="669" y="20" fill="black"> </text>

        <text x="695" y="20">Score: </text>
        <text id="score" x="745" y="20"> </text>

        <text x="695" y="220" fill="black">Next level: </text>
        <text id="nextLevels" x="775" y="220" fill="black"> </text>
    </g>

    <text id="fStatus" fill="#eeffee" stroke="black"  font-weight="bold" font-size="18px" x="30" y="277">Click to start NEW GAME</text>

   	<use xlink:href="#bigTurtle" transform="translate(360 360) scale(-1 1)"/>

    <!-- just debugging information -->
    <g id="debugEnvelope" display="none" text-rendering="optimizeSpeed" font-size="12px" stroke="none">

        <text x="20" y="350">position: </text>
        <text id="position" x="120" y="350"> </text>

        <text x="20" y="360">crocodile: </text>
        <text id="crocodile" x="120" y="360"> </text>

        <text x="20" y="370">inTheAir: </text>
        <text id="inTheAir" x="120" y="370"> </text>

        <text x="20" y="380">resetOffset: </text>
        <text id="resetOffset" x="120" y="380"> </text>

        <text x="20" y="390">bonus: </text>
        <text id="bonus" x="120" y="390"> </text>

        <text x="20" y="400">bonusTime: </text>
        <text id="bonusTime" x="120" y="400"> </text>

        <text x="20" y="410">kill: </text>
        <text id="kill" x="120" y="410"> </text>

        <text x="20" y="420">crossing: </text>
        <text id="crossing" x="120" y="420"> </text>

        <text x="20" y="430">nextLifeRange: </text>
        <text id="nextLifeRange" x="120" y="430"> </text>

        <text x="20" y="440">cloudPos: </text>
        <text id="cloudPos" x="120" y="440"> </text>

        <text x="20" y="450">cloudDirection: </text>
        <text id="cloudDirection" x="120" y="450"> </text>

        <text x="20" y="460">lightning: </text>
        <text id="lightningDeb" x="120" y="460"> </text>

        <text x="20" y="470">timeToOpenBank: </text>
        <text id="timeToOpenBank" x="120" y="470"> </text>

        <text x="20" y="480">leftBankOpen: </text>
        <text id="leftBankOpen" x="120" y="480"> </text>

        <text x="20" y="490">rightBankOpen: </text>
        <text id="rightBankOpen" x="120" y="490"> </text>

        <text x="20" y="500">allowLightning: </text>
        <text id="allowLightning" x="120" y="500"> </text>

        <text x="20" y="510">bonusType: </text>
        <text id="bonusType" x="120" y="510"> </text>

        <text x="20" y="520">cloudActualSpeed: </text>
        <text id="cloudActualSpeed" x="120" y="520"> </text>

        <text x="20" y="530">cloudHolder: </text>
        <text id="cloudHolder" x="120" y="530"> </text>

        <text x="20" y="540">lightningHolder: </text>
        <text id="lightningHolder" x="120" y="540"> </text>

        <text x="20" y="550">crocodile2nd: </text>
        <text id="crocodile2nd" x="120" y="550"> </text>

        <text x="20" y="560">prevPos: </text>
        <text id="prevPos" x="120" y="560"> </text>

    </g>

    <g stroke="none" font-size="14px">

    <a>
        <g>
            <rect x="640" y="334" width="91" height="20" fill="#ddddff" stroke="navy" rx="3" cursor="pointer"/>
            <text id="showMeHallOfFame" x="645" y="350" onclick="submitName('')" fill="navy" stroke="none" font-weight="bold" font-size="15px" cursor="pointer">HighScore</text>
        </g>
        <g>
            <rect x="750" y="334" width="45" height="20" fill="#bbbbff" stroke="navy" rx="3" cursor="pointer"/>
            <text id="showMeHelp" x="755" y="350" fill="navy" stroke="none" font-weight="bold" font-size="15px" cursor="pointer">Help</text>
        </g>

        <text x="500" y="365" fill="navy" stroke="none" font-weight="bold" font-size="15px">Options:</text>

        <text x="500" y="400" onclick="changeAll(1)" cursor="pointer">Turn to speed</text>
        <text x="600" y="400" onclick="changeAll(0)" cursor="pointer">Turn to quality</text>
        <text x="700" y="400" onclick="changeAll(2)" cursor="pointer">Turn to geom. precision</text>

        <text x="500" y="450" onclick="changeVisibility('debugEnvelope', 'block')" cursor="pointer">Show Debug</text>
        <text x="500" y="470" onclick="changeVisibility('debugEnvelope', 'none')" cursor="pointer">Hide Debug</text>

        <text x="500" y="510" onclick="changeVisibility('logEnvelope', 'block')" cursor="pointer">Show Log</text>
        <text x="500" y="530" onclick="changeVisibility('logEnvelope', 'none')" cursor="pointer">Hide Log</text>

        <text x="600" y="450" onclick="envZoom(1.5)" cursor="pointer">Zoom to 150%</text>
        <text x="600" y="470" onclick="envZoom(1.25)" cursor="pointer">Zoom to 125%</text>
        <text x="600" y="490" onclick="envZoom(1.1)" cursor="pointer">Zoom to 110%</text>
        <text x="600" y="510" onclick="envZoom(1)" cursor="pointer">Zoom to 100%</text>
        <text x="600" y="530" onclick="envZoom(0.9)" cursor="pointer">Zoom to 90%</text>
        <text x="600" y="550" onclick="envZoom(0.75)" cursor="pointer">Zoom to 75%</text>
        <text x="600" y="570" onclick="envZoom(0.5)" cursor="pointer">Zoom to 50%</text>
    </a>

    </g>

    <g display="none" text-rendering="optimizeSpeed" stroke="none" id="logEnvelope" fill="red" font-size="11px">
        <text id="logFile" x="10" y="20">Log: </text>
    </g>

    <!-- allowing game phases -->
    <g id="mezzoScreen">
        <rect x="-20" y="0" width="920" height="600" fill="#FFFFFF" stroke="none" stroke-width="0">
            <set id="hideMezzo" attributeName="display" to="none" begin="2s; indefinite" />
            <set id="showMezzo" attributeName="display" to="block" begin="indefinite" />
        </rect>

          	<use xlink:href="#bigTurtle" transform="translate(130 60) scale(1.4)" />

            <text x="250" y="300" fill="green" stroke="#004400" stroke-width="2" font-weight="bold" font-size="36px">SVG TURTLES</text>
            <text x="344" y="330">version 1.0 by Marek Raida</text>
            <animate id="fadeOffTitle" begin="hideMezzo.begin" attributeName="opacity" from="1" to="0" dur="1s" repeatCount="1" />
            <set attributeName="display" to="none" begin="fadeOffTitle.end" />
    </g>

    <g display="none">
        <rect x="15" y="25" width="760" height="550" fill="#FFFFFF" stroke="black" stroke-width="2" fill-opacity="0.92" rx="10" onkeydown="detectEscEnt(evt, 'Help')" />
        <use xlink:href="#bigTurtle" transform="translate(550 70) scale(0.5)" opacity="0.4"/>
        <use xlink:href="#bigTurtle" transform="translate(600 127) scale(0.4)" opacity="0.4" />
        <use xlink:href="#bigTurtle" transform="translate(560 160) scale(0.2)" opacity="0.4" />

        <text x="65" y="55" stroke="none" text-rendering="optimizeLegibility" onkeydown="detectEscEnt(evt, 'Help')" font-size="13px">
            <tspan x="55" dx="0" dy="25" font-weight="bold">Instructions........................</tspan>
            <tspan x="65" dx="0" dy="25">Carry ice cubes from left river bank to the right side. Use turtle's shields to jump over.</tspan>
            <tspan x="65" dx="0" dy="25">You can enter each bank only when is open (GO! is signalized).</tspan>
            <tspan x="65" dx="0" dy="25">Collect edible (apple) bonuses and avoid poisoned (skull) ones, after 2nd level.</tspan>
            <tspan x="65" dx="0" dy="25">Beware of croc's wife (2nd croc) which appears when level 3rd reached.</tspan>
            <tspan x="65" dx="0" dy="25">Avoid lightnings flashing from the cloud after 5th level.</tspan>
            <tspan x="65" dx="0" dy="25">Level is increased after each third successful crossing of the river (to and fro).</tspan>
            <tspan x="65" dx="0" dy="25">An extra life is added each hundred scored points.</tspan>
            <tspan x="65" dx="0" dy="25">Game is slowly speeding up :-)</tspan>
            <tspan x="55" dx="0" dy="25" font-weight="bold">Controls........................</tspan>
            <tspan x="65" dx="0" dy="25">Stay with mouse cursor somewhere over the playing area to enable controls.</tspan>
            <tspan x="65" dx="0" dy="25">Start/continue/restart the game by Enter key press or any mouse button (LBM/RBM/MBM) click.</tspan>
            <tspan x="65" dx="0" dy="25">Key "Esc" can be used for game break / hide Help and TopTen window.</tspan>
            <tspan x="65" dx="0" dy="25">Use keyboard arrow keys to move LEFT and RIGHT.</tspan>
            <tspan x="65" dx="0" dy="25">Alternatively use mouse buttons, LMB = jump to the left and RMB = jump to the right.</tspan>
            <tspan x="65" dx="0" dy="25">There are many other (self-describable) options.</tspan>
            <tspan x="55" dx="0" dy="25" font-weight="bold">About........................</tspan>
            <tspan x="65" dx="0" dy="25">Author: Marek Raida, Czech Republic, <a xlink:href="mailto:raida@guide.cz">raida@guide.cz</a></tspan>
            <tspan x="65" dx="0" dy="25">Development: Started and finishend during December 2003</tspan>
            <tspan x="65" dx="0" dy="25">Idea: Based on Turtles game from Macrospace. Great turtle picture by Natalie Bitomska :-)</tspan>
        </text>

        <text x="265" y="60" stroke="gray" fill="#eeffee" font-size="18px">Q u i c k  .  h e l p</text>

        <set id="hideHelp" attributeName="display" to="none" begin="click; indefinite; showSignaturing.begin" />
        <set id="showHelp" attributeName="display" to="block" begin="showMeHelp.click" />
    </g>

    <g display="none">
        <rect x="15" y="25" width="760" height="550" fill="#FFFFFF" stroke="black" stroke-width="2" fill-opacity="0.92" rx="10" onkeydown="detectEscEnt(evt, 'HallOfFame')" />

        <text x="75" y="70" stroke="gray" fill="gold" font-weight="bold" font-size="12px" id="HallOfFame" onkeydown="detectEscEnt(evt, 'HallOfFame')">
        </text>

        <text x="75" y="82" stroke="none" fill="black" font-size="7px" id="HallOfFameNext" onkeydown="detectEscEnt(evt, 'HallOfFame')">
        </text>

        <text x="160" y="60" stroke="gray" fill="#eeffee" font-weight="bold" font-size="18px">H a l l . o f . F a m e . - . T o p . T w e n t y</text>

        <set id="hideHallOfFame" attributeName="display" to="none" begin="click; indefinite" />
        <set id="showHallOfFame" attributeName="display" to="block" begin="showMeHallOfFame.click; indefinite" />
    </g>

    <g id="signaturing" display="none">
        <rect x="-30" y="-30" width="900" height="750" opacity="0" />
        <rect x="15" y="25" width="760" height="550" fill="#FFFFFF" stroke="black" stroke-width="2" fill-opacity="0.92" rx="10" onkeydown="writeDown(evt)" />

        <text x="261" y="60" stroke="gray" fill="#eeffee" font-weight="bold" font-size="18px">C o n g r a t u l a t i o n s</text>

        <text x="101" y="191" stroke="none">Write down your name and confirm by key Enter:</text>
        <text fill="#eeffee" stroke="black" font-weight="bold" font-size="18px" id="inputNameX" x="110" y="223"> </text>
        <a>
            <line x1="104" y1="202" x2="104" y2="228" stroke="#000000">
                <animate attributeName="display" begin="0s" dur="1s" to="none" repeatCount="indefinite" />
            </line>
            <rect x="100" y="200" width="490" height="30" fill="black" onkeydown="writeDown(evt)" opacity="0.1" rx="5" />
        </a>

        <set id="showSignaturing" attributeName="display" to="block" begin="indefinite" />
        <set id="hideSignaturing" attributeName="display" to="none" begin="showHallOfFame.begin; showHelp.begin" />
    </g>

</g>

<!-- ************************** AUDIO ELEMENTS ***************************** -->

    <html:audio id="soundShow" begin="showIt.begin;hideIt.begin" volume="0.8">
        <html:source src="show.ogg" type="audio/ogg" />
        <html:source src="show.mp3" type="audio/mpeg" />
    </html:audio>

    <html:audio id="soundFlashing" begin="flashing.begin" volume="0.66">
        <html:source src="flashing.ogg" type="audio/ogg" />
        <html:source src="flashing.mp3" type="audio/mpeg" />
    </html:audio>

    <!-- not fully done yet -->
    <html:audio id="soundKill" begin="killingByLightning.begin;killingByBonus.begin;killingByCroc.begin">
        <html:source src="soundKill.ogg" type="audio/ogg" />
        <html:source src="soundKill.mp3" type="audio/mpeg" />
    </html:audio>

    <html:audio id="soundPerfect" begin="loadDown.begin" volume="0.75">
        <html:source src="soundPerfect.ogg" type="audio/ogg" />
        <html:source src="soundPerfect.mp3" type="audio/mpeg" />
    </html:audio>

    <html:audio id="soundWay" begin="indefinite">
        <html:source src="soundWay.ogg" type="audio/ogg" />
        <html:source src="soundWay.mp3" type="audio/mpeg" />
    </html:audio>

    <html:audio id="soundLevel" begin="indefinite">
        <html:source src="soundLevel.ogg" type="audio/ogg" />
        <html:source src="soundLevel.mp3" type="audio/mpeg" />
    </html:audio>

    <html:audio id="soundBonus" begin="indefinite" volume="0.5">
        <html:source src="soundBonus.ogg" type="audio/ogg" />
        <html:source src="soundBonus.mp3" type="audio/mpeg" />
    </html:audio>

    <html:audio id="soundEnd" begin="indefinite">
        <html:source src="soundEnd.ogg" type="audio/ogg" />
        <html:source src="soundEnd.mp3" type="audio/mpeg" />
    </html:audio>

    <html:audio id="soundStart" begin="indefinite">
        <html:source src="soundStart.ogg" type="audio/ogg" />
        <html:source src="soundStart.mp3" type="audio/mpeg" />
    </html:audio>

    <html:audio id="soundGreat" begin="indefinite" volume="0.75">
        <html:source src="soundGreat.ogg" type="audio/ogg" />
        <html:source src="soundGreat.mp3" type="audio/mpeg" />
    </html:audio>

    <html:audio id="bubble" begin="indefinite" volume="0.5">
        <html:source src="bubble.ogg" type="audio/ogg" />
        <html:source src="bubble.mp3" type="audio/mpeg" />
    </html:audio>

    <!-- not in use now -->
    <html:audio id="beam" begin="hideItByCroc.begin+0.3s" volume="0.6">
        <html:source src="beam.ogg" type="audio/ogg" />
        <html:source src="beam.mp3" type="audio/mpeg" />
    </html:audio>

</svg>